// String or list length
function length with thing do
  set len to 0
  for each _ in thing do
    change len to len + 1
  end
  return len
end

// Determine if a string or list is empty.
function is_empty with thing do
  for each _ in thing do
    return false
  end
  return true
end

// Reverse a List
function reverse with list do
  set reversed to []
  set len to length(list)
  set i to len + 1

  repeat len times do
    change i to i - 1
    change reversed to push(reversed, list[i])
  end

  return reversed
end

// Return a copy of the list with the element at the given index removed.
function remove_at with list, idx do
  set result to []
  set i to 0

  for each elem in list do
    change i to i + 1
    if i != idx do
      change result to push(result, list[i])
    end
  end

  return result
end

// String split
function split with string, separator do
  set words to []
  set word to ""

  for each char in string do
    if not (char is separator) do
      change word to join(word, char)

    else do
      if not is_empty(word) do
        change words to push(words, word)
      end
      change word to ""
    end
  end

  if not is_empty(word) do
    change words to push(words, word)
  end

  return words
end

// -------------------------------------------------------------------
function categorize with laundry_items do
  set categorized to []
  for each item in laundry_items do
    change categorized to push(categorized, reverse(split(item, " ")))
  end
  return categorized
end

// Starting at start_idx, find the _next_ sock
function next_sock with clothes, start_idx do
  set idx to 0
  for each item in clothes do
    change idx to idx + 1
    if item[1] is "sock" and idx > start_idx do
      return idx
    end
  end
  return -1
end

function other_foot with foot do
  if foot is "left" do
    return "right"
  end
  return "left"
end

function index_of_sock with clothes, colour, foot, start_idx do
  set idx to 0
  for each item in clothes do
    change idx to idx + 1
    if item[1] is "sock" and item[2] is colour and item[3] is foot and idx > start_idx do
      return idx
    end
  end
  return -1
end

// -------------------------------------------------------------------
function matching_socks with clean, dirty do
  // a "sock" is a list: ["sock", colour, foot]
  set clothes to categorize(concat(clean, dirty))
  set pairs to []
  set first to []
  set first_idx to 0
  set second_idx to 0

  repeat_forever do
    change first_idx to next_sock(clothes, first_idx)
    if first_idx == -1 do
      return pairs
    end

    change first to clothes[first_idx]
    change second_idx to index_of_sock(clothes, first[2], other_foot(first[3]), first_idx)

    if second_idx != -1 do
      change pairs to push(pairs, join(first[2], " socks"))
      change clothes[second_idx] to [""]
    end

    change clothes[first_idx] to [""]
  end
end
