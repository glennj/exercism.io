include "lib/assert";
import "bucket" as Bucket;
import "lib/math" as Math;

def validate:
  assert(.goal <= ([.bucketOne, .bucketTwo] | max); "impossible")
  | Math::gcd(.bucketOne; .bucketTwo) as $gcd
  | assert($gcd == 1 or .goal % $gcd == 0; "impossible")
;

def solve:

  def _winner(a; b): {moves, goalBucket: a.name, otherBucket: b.amount};

  def _solve:
    if   .b1.amount == .goal then _winner(.b1; .b2)
    elif .b2.amount == .goal then _winner(.b2; .b1)
    else
      if   .b1 | Bucket::isEmpty then .b1 |= Bucket::fill
      elif .b2 | Bucket::isFull  then .b2 |= Bucket::empty
      else 
        (.b1 | Bucket::pourInto(.b2)) as [$b1, $b2]
        | .b1 |= $b1
        | .b2 |= $b2
      end
      | .moves += 1
      | _solve
    end
  ;

  # first move: fill b1
  (.b1 |= Bucket::fill) | .moves += 1

  # (potential) second move: fill b2 if its the right size
  | if .b2.size == .goal
      then
        (.b2 |= Bucket::fill) | .moves += 1
      else .
    end
  | _solve
;

####

validate
| Bucket::new("one"; .bucketOne) as $one
| Bucket::new("two"; .bucketTwo) as $two
| if .startBucket == "one"
    then {b1: $one, b2: $two, moves: 0, goal}
    else {b1: $two, b2: $one, moves: 0, goal}
  end
| solve
