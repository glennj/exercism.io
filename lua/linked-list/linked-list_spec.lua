local LinkedList = require('linked-list')

describe('linked-list', function()
  it('should be able to pop pushed elements', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    assert.equal(20, list:pop())
    assert.equal(10, list:pop())
  end)

  it('should be able to shift pushed elements', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    assert.equal(10, list:shift())
    assert.equal(20, list:shift())
  end)

  it('should be able to shift unshifted elements', function()
    local list = LinkedList()
    list:unshift(10)
    list:unshift(20)
    assert.equal(20, list:shift())
    assert.equal(10, list:shift())
  end)

  it('should be able to pop unshifted elements', function()
    local list = LinkedList()
    list:unshift(10)
    list:unshift(20)
    assert.equal(10, list:pop())
    assert.equal(20, list:pop())
  end)

  it('should be able to count its elements', function()
    local list = LinkedList()
    assert.equal(0, list:count())
    list:push(10)
    assert.equal(1, list:count())
    list:push(20)
    assert.equal(2, list:count())

  end)

  it('should count correctly after a shift', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    list:shift()
    assert.equal(1, list:count())
  end)

  it('should count correctly after a pop', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    list:pop()
    assert.equal(1, list:count())
  end)

  it('should be able to delete from the beginning of the list', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    list:push(30)
    list:delete(30)
    assert.equal(2, list:count())
    assert.equal(20, list:pop())
    assert.equal(10, list:shift())
  end)

  it('should be able to delete from the middle of the list', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    list:push(30)
    list:delete(20)
    assert.equal(2, list:count())
    assert.equal(30, list:pop())
    assert.equal(10, list:shift())
  end)

  it('should be able to delete from the end of the list', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    list:push(30)
    list:delete(10)
    assert.equal(2, list:count())
    assert.equal(30, list:pop())
    assert.equal(20, list:shift())
  end)

  it('should delete all elements with the matching value', function()
    local list = LinkedList()
    list:push(10)
    list:push(20)
    list:push(20)
    list:push(30)
    list:delete(20)
    assert.equal(2, list:count())
    assert.equal(30, list:pop())
    assert.equal(10, list:shift())
  end)

  it('should be able to delete the only element', function()
    local list = LinkedList()
    list:push(10)
    list:delete(10)
    assert.equal(0, list:count())
  end)
end)
