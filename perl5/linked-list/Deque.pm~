#!perl
## no critic (Subroutines::ProhibitBuiltinHomonyms, Modules::ProhibitMultiplePackages)

use strict;
use warnings;

package Node;

sub new {
    my ($class, $value, $prev, $next) = @_;
    my $self = {
        value => $value,
        prev => $prev,
        next => $next,
    };
    return bless $self, $class;
}

package Deque;

sub new {
    my ($class) = @_;
    my $self = {
        head => undef,
        tail => undef,
    };
    return bless $self, $class;
}

sub unshift {
    my ($self, $value) = @_;
    my $node = Node->new($value, undef, $self->{head});
    if ($self->{head}) {
        $node->{next} = $self->{head};
        $self->{head}{prev} = $node;
    }
    $self->{head} = $node;
    if (not defined $self->{tail}) {
        $self->{tail} = $node;
    }
    return $self;
}

sub shift {
    my ($self) = @_;
    return if not $self->{head};
    my $value = $self->{head}{value};
    $self->{head} = $self->{head}{next};
    if (not defined $self->{head}) {
        $self->{tail} = undef;
    }
    return $value;
}

sub push {
    my ($self, $value) = @_;
    my $node = Node->new($value, $self->{tail}, undef);
    if ($self->{tail}) {
        $node->{prev} = $self->{tail};
        $self->{tail}{next} = $node;
    }
    $self->{tail} = $node;
    if (not defined $self->{head}) {
        $self->{head} = $node;
    }
    return $self;
}

sub pop {
    my ($self) = @_;
    return if not $self->{tail};
    my $value = $self->{tail}{value};
    $self->{tail} = $self->{tail}{prev};
    if (not defined $self->{tail}) {
        $self->{head} = undef;
    }
    return $value;
}

1;
