#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "queen-attack.tcl"

# Test creation of Queens with valid and invalid positions
test queen-1.1 "queen with a valid position" -body {
    set queen [Queen new 2 3]
    list [$queen col] [$queen row]
} -returnCodes ok -result {3 2}

skip queen-2.1
test queen-2.1 "queen must have positive row" -body {
    set queen [Queen new -2 2]
} -returnCodes error -result "row not positive"

skip queen-2.2
test queen-2.2 "queen must have row on board" -body {
    set queen [Queen new 8 4]
} -returnCodes error -result "row not on board"

skip queen-2.3
test queen-2.3 "queen must have positive column" -body {
    set queen [Queen new 2 -2]
} -returnCodes error -result "column not positive"

skip queen-2.4
test queen-2.4 "queen must have column on board" -body {
    set queen [Queen new 4 8]
} -returnCodes error -result "column not on board"


# Test the ability of one queen to attack another
skip queen-3.1
test queen-3.1 "can not attack" -body {
    set q1 [Queen new 2 4]
    set q2 [Queen new 6 6]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result false

skip queen-3.2
test queen-3.2 "can attack on same row" -body {
    set q1 [Queen new 2 4]
    set q2 [Queen new 2 6]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result true

skip queen-3.3
test queen-3.3 "can attack on same column" -body {
    set q1 [Queen new 4 5]
    set q2 [Queen new 2 5]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result true

skip queen-3.4
test queen-3.4 "can attack on first diagonal" -body {
    set q1 [Queen new 2 2]
    set q2 [Queen new 0 4]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result true

skip queen-3.5
test queen-3.5 "can attack on second diagonal" -body {
    set q1 [Queen new 2 2]
    set q2 [Queen new 3 1]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result true

skip queen-3.6
test queen-3.6 "can attack on third diagonal" -body {
    set q1 [Queen new 2 2]
    set q2 [Queen new 1 1]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result true

skip queen-3.7
test queen-3.7 "can attack on fourth diagonal" -body {
    set q1 [Queen new 1 7]
    set q2 [Queen new 0 6]
    $q1 canAttack $q2
} -returnCodes ok -match boolean -result true


# some edge cases
skip queen-4.1
test queen-4.1 "cannot occupy same position on board" -body {
    set white [Queen new 4 4]
    set black [Queen new 4 4]
    $white canAttack $black
} -returnCodes error -result "same position"

skip queen-4.2
test queen-4.2 "cannot attack a non-object" -body {
    set white [Queen new 4 4]
    $white canAttack "foo"
} -returnCodes error -result "not a Queen"

skip queen-4.3
test queen-4.3 "cannot attack a non-Queen object" -body {
    set white [Queen new 4 4]
    $white canAttack [oo::object new]
} -returnCodes error -result "not a Queen"


cleanupTests
