#!/usr/bin/env tclsh
set version 1.2.0
package require tcltest
namespace import ::tcltest::*
source "secret-handshake.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

customMatch list listMatch
proc listMatch {expected actual} {
    if {[llength $expected] != [llength $actual]} {
        return false
    }
    foreach e $expected a $actual {
        if {$e != $a} {
            return false
        }
    }
    return true
}


if {$::argv0 eq [info script]} {

    set cases {
        handshake-1 "do nothing for zero" 0 {}
        handshake-2 "wink for 1" 1 {wink}
        handshake-3 "double blink for 10" 2 {"double blink"}
        handshake-4 "close your eyes for 100" 4 {"close your eyes"}
        handshake-5 "jump for 1000" 8 {jump}
        handshake-6 "combine two actions" 3 {wink "double blink"}
        handshake-7 "reverse two actions" 19 {"double blink" wink}
        handshake-8 "reversing one action gives the same action" 24 {jump}
        handshake-9 "reversing no actions still gives no actions" 16 {}
        handshake-10 "all possible actions" 15 {wink "double blink" "close your eyes" jump}
        handshake-11 "reverse all possible actions" 31 {jump "close your eyes" "double blink" wink}
    }

    foreach {name description code actions} $cases {
        test $name $description -body {
            secretHandshake $code
        } -returnCodes ok -match list -result $actions
    }

    cleanupTests
}
