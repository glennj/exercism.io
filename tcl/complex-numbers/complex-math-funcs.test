#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "complex-numbers.tcl"

configure -verbose {body error msec}

test complex-3.1 "Add purely real numbers" \
    -body { expr {cadd("1i0", "2i0")} } \
    -returnCodes ok \
    -result "3i0"

test complex-3.2 "Add purely imaginary numbers" \
    -body { expr {cadd("0i1", "0i2")} } \
    -returnCodes ok \
    -result "0i3"

test complex-3.3 "Add numbers with real and imaginary part" \
    -body { expr {cadd("1i2", "3i4")} } \
    -returnCodes ok \
    -result "4i6"

test complex-4.1 "Subtract purely real numbers" \
    -body { expr {csub("1i0", "2i0")} } \
    -returnCodes ok \
    -result "-1i0"

test complex-4.2 "Subtract purely imaginary numbers" \
    -body { expr {csub("0i1", "0i2")} } \
    -returnCodes ok \
    -result "0i-1"

test complex-4.3 "Subtract numbers with real and imaginary part" \
    -body { expr {csub("1i2", "3i4")} } \
    -returnCodes ok \
    -result "-2i-2"

test complex-5.1 "Multiply purely real numbers" \
    -body { expr {cmul("1i0", "2i0")} } \
    -returnCodes ok \
    -result "2i0"

test complex-5.2 "Multiply purely imaginary numbers" \
    -body { expr {cmul("0i1", "0i2")} } \
    -returnCodes ok \
    -result "-2i0"

test complex-5.3 "Multiply numbers with real and imaginary part" \
    -body { expr {cmul("1i2", "3i4")} } \
    -returnCodes ok \
    -result "-5i10"

test complex-5.4 "Imaginary unit" \
    -body { expr {cmul("0i1", "0i1")} } \
    -returnCodes ok \
    -result "-1i0"

test complex-6.1 "Divide purely real numbers" \
    -body { expr {cdiv("1i0", "2i0")} } \
    -returnCodes ok \
    -result "0.5i0.0"

test complex-6.2 "Divide purely imaginary numbers" \
    -body { expr {cdiv("0i1", "0i2")} } \
    -returnCodes ok \
    -result "0.5i0.0"

test complex-6.3 "Divide numbers with real and imaginary part" \
    -body { expr {cdiv("1i2", "3i4")} } \
    -returnCodes ok \
    -result "0.44i0.08"

test complex-7.1 "Absolute value of a positive purely real number" \
    -body { expr {cabs("5i0")} } \
    -returnCodes ok \
    -result 5.0

test complex-7.2 "Absolute value of a negative purely real number" \
    -body { expr {cabs("-5i0")} } \
    -returnCodes ok \
    -result 5.0

test complex-7.3 "Absolute value of a purely imaginary number with positive imaginary part" \
    -body { expr {cabs("0i5")} } \
    -returnCodes ok \
    -result 5.0

test complex-7.4 "Absolute value of a purely imaginary number with negative imaginary part" \
    -body { expr {cabs("0i-5")} } \
    -returnCodes ok \
    -result 5.0

test complex-7.5 "Absolute value of a number with real and imaginary part" \
    -body { expr {cabs("3i4")} } \
    -returnCodes ok \
    -result 5.0

test complex-8.1 "Conjugate a purely real number" \
    -body { expr {cconj("5i0")} } \
    -returnCodes ok \
    -result "5i0"

test complex-8.2 "Conjugate a purely imaginary number" \
    -body { expr {cconj("0i5")} } \
    -returnCodes ok \
    -result "0i-5"

test complex-8.3 "Conjugate a number with real and imaginary part" \
    -body { expr {cconj("1i1")} } \
    -returnCodes ok \
    -result "1i-1"

# Complex exponential function

test complex-9.1 "Euler's identity/formula" \
    -body {
        set pi [expr {atan(1) * 4}]
        set c "0i$pi"
        expr {cexp($c)}
    } \
    -returnCodes ok \
    -result "-1.0i0.0"

test complex-9.2 "Exponential of 0" \
    -body { expr {cexp("0i0")} } \
    -returnCodes ok \
    -result "1.0i0.0"

test complex-9.3 "Exponential of a purely real number" \
    -body { expr {cexp("1i0")} } \
    -returnCodes ok \
    -result "2.7182818285i0.0"

test complex-9.4 "Exponential of a number with real and imaginary part" \
    -body {
        # need to express the input with more precision to get the expected output
        set c [[ComplexNumber new [expr {log(2)}] [expr {atan(1) * 4}]] toString 17]
        expr {cexp($c)}
    } \
    -returnCodes ok \
    -result "-2.0i0.0"

cleanupTests
