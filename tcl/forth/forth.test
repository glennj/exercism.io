#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "forth.tcl"

test forth-1 "numbers just get pushed onto the stack" -body {
    evalForth "1 2 3 4 5"
} -returnCodes ok -result {1 2 3 4 5}

skip forth-2
test forth-2 "can add two numbers" -body {
    evalForth "1 2 +"
} -returnCodes ok -result {3}

skip forth-3
test forth-3 "errors if there is nothing on the stack" -body {
    evalForth "+"
} -returnCodes error -result "empty stack"

skip forth-4
test forth-4 "errors if there is only one value on the stack" -body {
    evalForth "1 +"
} -returnCodes error -result "only one value on the stack"

skip forth-5
test forth-5 "can subtract two numbers" -body {
    evalForth "3 4 -"
} -returnCodes ok -result {-1}

skip forth-6
test forth-6 "errors if there is nothing on the stack" -body {
    evalForth "-"
} -returnCodes error -result "empty stack"

skip forth-7
test forth-7 "errors if there is only one value on the stack" -body {
    evalForth "1 -"
} -returnCodes error -result "only one value on the stack"

skip forth-8
test forth-8 "can multiply two numbers" -body {
    evalForth "2 4 *"
} -returnCodes ok -result {8}

skip forth-9
test forth-9 "errors if there is nothing on the stack" -body {
    evalForth "*"
} -returnCodes error -result "empty stack"

skip forth-10
test forth-10 "errors if there is only one value on the stack" -body {
    evalForth "1 *"
} -returnCodes error -result "only one value on the stack"

skip forth-11
test forth-11 "can divide two numbers" -body {
    evalForth "12 3 /"
} -returnCodes ok -result {4}

skip forth-12
test forth-12 "performs integer division" -body {
    evalForth "8 3 /"
} -returnCodes ok -result {2}

skip forth-13
test forth-13 "errors if dividing by zero" -body {
    evalForth "4 0 /"
} -returnCodes error -result "divide by zero"

skip forth-14
test forth-14 "errors if there is nothing on the stack" -body {
    evalForth "/"
} -returnCodes error -result "empty stack"

skip forth-15
test forth-15 "errors if there is only one value on the stack" -body {
    evalForth "1 /"
} -returnCodes error -result "only one value on the stack"

skip forth-16
test forth-16 "addition and subtraction" -body {
    evalForth "1 2 + 4 -"
} -returnCodes ok -result {-1}

skip forth-17
test forth-17 "multiplication and division" -body {
    evalForth "2 4 * 3 /"
} -returnCodes ok -result {2}

skip forth-18
test forth-18 "copies a value on the stack" -body {
    evalForth "1 dup"
} -returnCodes ok -result {1 1}

skip forth-19
test forth-19 "copies the top value on the stack" -body {
    evalForth "1 2 dup"
} -returnCodes ok -result {1 2 2}

skip forth-20
test forth-20 "errors if there is nothing on the stack" -body {
    evalForth "dup"
} -returnCodes error -result "empty stack"

skip forth-21
test forth-21 "removes the top value on the stack if it is the only one" -body {
    evalForth "1 drop"
} -returnCodes ok -result {}

skip forth-22
test forth-22 "removes the top value on the stack if it is not the only one" -body {
    evalForth "1 2 drop"
} -returnCodes ok -result {1}

skip forth-23
test forth-23 "errors if there is nothing on the stack" -body {
    evalForth "drop"
} -returnCodes error -result "empty stack"

skip forth-24
test forth-24 "swaps the top two values on the stack if they are the only ones" -body {
    evalForth "1 2 swap"
} -returnCodes ok -result {2 1}

skip forth-25
test forth-25 "swaps the top two values on the stack if they are not the only ones" -body {
    evalForth "1 2 3 swap"
} -returnCodes ok -result {1 3 2}

skip forth-26
test forth-26 "errors if there is nothing on the stack" -body {
    evalForth "swap"
} -returnCodes error -result "empty stack"

skip forth-27
test forth-27 "errors if there is only one value on the stack" -body {
    evalForth "1 swap"
} -returnCodes error -result "only one value on the stack"

skip forth-28
test forth-28 "copies the second element if there are only two" -body {
    evalForth "1 2 over"
} -returnCodes ok -result {1 2 1}

skip forth-29
test forth-29 "copies the second element if there are more than two" -body {
    evalForth "1 2 3 over"
} -returnCodes ok -result {1 2 3 2}

skip forth-30
test forth-30 "errors if there is nothing on the stack" -body {
    evalForth "over"
} -returnCodes error -result "empty stack"

skip forth-31
test forth-31 "errors if there is only one value on the stack" -body {
    evalForth "1 over"
} -returnCodes error -result "only one value on the stack"

skip forth-32
test forth-32 "can consist of built-in words" -body {
    evalForth ": dup-twice dup dup ;\n1 dup-twice"
} -returnCodes ok -result {1 1 1}

skip forth-33
test forth-33 "execute in the right order" -body {
    evalForth ": countup 1 2 3 ;\ncountup"
} -returnCodes ok -result {1 2 3}

skip forth-34
test forth-34 "can override other user-defined words" -body {
    evalForth ": foo dup ;\n: foo dup dup ;\n1 foo"
} -returnCodes ok -result {1 1 1}

skip forth-35
test forth-35 "can override built-in words" -body {
    evalForth ": swap dup ;\n1 swap"
} -returnCodes ok -result {1 1}

skip forth-36
test forth-36 "can override built-in operators" -body {
    evalForth ": + * ;\n3 4 +"
} -returnCodes ok -result {12}

skip forth-37
test forth-37 "can use different words with the same name" -body {
    evalForth ": foo 5 ;\n: bar foo ;\n: foo 6 ;\nbar foo"
} -returnCodes ok -result {5 6}

skip forth-38
test forth-38 "can define word that uses word with the same name" -body {
    evalForth ": foo 10 ;\n: foo foo 1 + ;\nfoo"
} -returnCodes ok -result {11}

skip forth-39a
test forth-39a "cannot redefine non-negative numbers" -body {
    evalForth ": 1 2 ;"
} -returnCodes error -result "illegal operation"

skip forth-39b
test forth-39b "cannot redefine negative numbers" -body {
    evalForth ": -1 2 ;"
} -returnCodes error -result "illegal operation"

skip forth-40
test forth-40 "errors if executing a non-existent word" -body {
    evalForth "foo"
} -returnCodes error -result "undefined operation"

skip forth-41
test forth-41 "DUP is case-insensitive" -body {
    evalForth "1 DUP Dup dup"
} -returnCodes ok -result {1 1 1 1}

skip forth-42
test forth-42 "DROP is case-insensitive" -body {
    evalForth "1 2 3 4 DROP Drop drop"
} -returnCodes ok -result {1}

skip forth-43
test forth-43 "SWAP is case-insensitive" -body {
    evalForth "1 2 SWAP 3 Swap 4 swap"
} -returnCodes ok -result {2 3 4 1}

skip forth-44
test forth-44 "OVER is case-insensitive" -body {
    evalForth "1 2 OVER Over over"
} -returnCodes ok -result {1 2 1 2 1}

skip forth-45
test forth-45 "user-defined words are case-insensitive" -body {
    evalForth ": foo dup ;\n1 FOO Foo foo"
} -returnCodes ok -result {1 1 1 1}

skip forth-46
test forth-46 "definitions are case-insensitive" -body {
    evalForth ": SWAP DUP Dup dup ;\n1 swap"
} -returnCodes ok -result {1 1 1 1}


cleanupTests
