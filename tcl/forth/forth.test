#!/usr/bin/env tclsh
set version 1.7.1
package require tcltest
namespace import ::tcltest::*
source "forth.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set cases {
        forth-1 "numbers just get pushed onto the stack"
            "1 2 3 4 5" ok {1 2 3 4 5}
        forth-2 "can add two numbers"
            "1 2 +" ok {3}
        forth-3 "errors if there is nothing on the stack"
            "+" error "empty stack"
        forth-4 "errors if there is only one value on the stack"
            "1 +" error "only one value on the stack"
        forth-5 "can subtract two numbers"
            "3 4 -" ok {-1}
        forth-6 "errors if there is nothing on the stack"
            "-" error "empty stack"
        forth-7 "errors if there is only one value on the stack"
            "1 -" error "only one value on the stack"
        forth-8 "can multiply two numbers"
            "2 4 *" ok {8}
        forth-9 "errors if there is nothing on the stack"
            "*" error "empty stack"
        forth-10 "errors if there is only one value on the stack"
            "1 *" error "only one value on the stack"
        forth-11 "can divide two numbers"
            "12 3 /" ok {4}
        forth-12 "performs integer division"
            "8 3 /" ok {2}
        forth-13 "errors if dividing by zero"
            "4 0 /" error "divide by zero"
        forth-14 "errors if there is nothing on the stack"
            "/" error "empty stack"
        forth-15 "errors if there is only one value on the stack"
            "1 /" error "only one value on the stack"
        forth-16 "addition and subtraction"
            "1 2 + 4 -" ok {-1}
        forth-17 "multiplication and division"
            "2 4 * 3 /" ok {2}
        forth-18 "copies a value on the stack"
            "1 dup" ok {1 1}
        forth-19 "copies the top value on the stack"
            "1 2 dup" ok {1 2 2}
        forth-20 "errors if there is nothing on the stack"
            "dup" error "empty stack"
        forth-21 "removes the top value on the stack if it is the only one"
            "1 drop" ok {}
        forth-22 "removes the top value on the stack if it is not the only one"
            "1 2 drop" ok {1}
        forth-23 "errors if there is nothing on the stack"
            "drop" error "empty stack"
        forth-24 "swaps the top two values on the stack if they are the only ones"
            "1 2 swap" ok {2 1}
        forth-25 "swaps the top two values on the stack if they are not the only ones"
            "1 2 3 swap" ok {1 3 2}
        forth-26 "errors if there is nothing on the stack"
            "swap" error "empty stack"
        forth-27 "errors if there is only one value on the stack"
            "1 swap" error "only one value on the stack"
        forth-28 "copies the second element if there are only two"
            "1 2 over" ok {1 2 1}
        forth-29 "copies the second element if there are more than two"
            "1 2 3 over" ok {1 2 3 2}
        forth-30 "errors if there is nothing on the stack"
            "over" error "empty stack"
        forth-31 "errors if there is only one value on the stack"
            "1 over" error "only one value on the stack"
        forth-32 "can consist of built-in words"
            ": dup-twice dup dup ;\n1 dup-twice" ok {1 1 1}
        forth-33 "execute in the right order"
            ": countup 1 2 3 ;\ncountup" ok {1 2 3}
        forth-34 "can override other user-defined words"
            ": foo dup ;\n: foo dup dup ;\n1 foo" ok {1 1 1}
        forth-35 "can override built-in words"
            ": swap dup ;\n1 swap" ok {1 1}
        forth-36 "can override built-in operators"
            ": + * ;\n3 4 +" ok {12}
        forth-37 "can use different words with the same name"
            ": foo 5 ;\n: bar foo ;\n: foo 6 ;\nbar foo" ok {5 6}
        forth-38 "can define word that uses word with the same name"
            ": foo 10 ;\n: foo foo 1 + ;\nfoo" ok {11}
        forth-39 "cannot redefine numbers"
            ": 1 2 ;" error "illegal operation"
        forth-40 "errors if executing a non-existent word"
            "foo" error "undefined operation"
        forth-41 "DUP is case-insensitive"
            "1 DUP Dup dup" ok {1 1 1 1}
        forth-42 "DROP is case-insensitive"
            "1 2 3 4 DROP Drop drop" ok {1}
        forth-43 "SWAP is case-insensitive"
            "1 2 SWAP 3 Swap 4 swap" ok {2 3 4 1}
        forth-44 "OVER is case-insensitive"
            "1 2 OVER Over over" ok {1 2 1 2 1}
        forth-45 "user-defined words are case-insensitive"
            ": foo dup ;\n1 FOO Foo foo" ok {1 1 1 1}
        forth-46 "definitions are case-insensitive"
            ": SWAP DUP Dup dup ;\n1 swap" ok {1 1 1 1}
    }

    foreach {name description input status result} $cases {
        test $name $description -body {
            evalForth $input
        } -returnCodes $status -result $result
    }

    cleanupTests
}
