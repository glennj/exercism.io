#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "bowling.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set score_cases {
        bowling-1.1 "should be able to score a game with all zeros"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 0
        bowling-1.2 "should be able to score a game with no strikes or spares"
            {3 6 3 6 3 6 3 6 3 6 3 6 3 6 3 6 3 6 3 6} 90
        bowling-1.3 "a spare followed by zeros is worth ten points"
            {6 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 10
        bowling-1.4 "points scored in the roll after a spare are counted twice"
            {6 4 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 16
        bowling-1.5 "consecutive spares each get a one roll bonus"
            {5 5 3 7 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 31
        bowling-1.6 "a spare in the last frame gets a one roll bonus that is counted once"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 3 7} 17
        bowling-1.7 "a strike earns ten points in a frame with a single roll"
            {10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 10
        bowling-1.8 "points scored in the two rolls after a strike are counted twice as a bonus"
            {10 5 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 26
        bowling-1.9 "consecutive strikes each get the two roll bonus"
            {10 10 10 5 3 0 0 0 0 0 0 0 0 0 0 0 0} 81
        bowling-1.10 "a strike in the last frame gets a two roll bonus that is counted once"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 7 1} 18
        bowling-1.11 "rolling a spare with the two roll bonus does not get a bonus roll"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 7 3} 20
        bowling-1.12 "strikes with the two roll bonus do not get bonus rolls"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 10 10} 30
        bowling-1.13 "a strike with the one roll bonus after a spare in the last frame does not get a bonus"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 3 10} 20
        bowling-1.14 "all strikes is a perfect game"
            {10 10 10 10 10 10 10 10 10 10 10 10} 300
        bowling-1.15 "two bonus rolls after a strike in the last frame can score more than 10 points if one is a strike"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 10 6} 26
    }

    foreach {name description rolls result} $score_cases {
        test $name $description -body {
            set game [Bowling new]
            foreach roll $rolls {
                $game roll $roll
            }
            $game score
        } -returnCodes ok -result $result
    }


    set roll_error_cases {
        bowling-2.1 "rolls cannot score negative points"
            {} -1
            "Negative roll is invalid"
        bowling-2.2 "a roll cannot score more than 10 points"
            {} 11
            "Pin count exceeds pins on the lane"
        bowling-2.3 "two rolls in a frame cannot score more than 10 points"
            {5} 6
            "Pin count exceeds pins on the lane"
        bowling-2.4 "bonus roll after a strike in the last frame cannot score more than 10 points"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10} 11
            "Pin count exceeds pins on the lane"
        bowling-2.5 "two bonus rolls after a strike in the last frame cannot score more than 10 points"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 5} 6
            "Pin count exceeds pins on the lane"
        bowling-2.6 "the second bonus rolls after a strike in the last frame cannot be a strike if the first one is not a strike"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 6} 10
            "Pin count exceeds pins on the lane"
        bowling-2.7 "second bonus roll after a strike in the last frame cannot score more than 10 points"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 10} 11
            "Pin count exceeds pins on the lane"
        bowling-2.8 "cannot roll if game already has ten frames"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0} 0
            "Cannot roll after game is over"
        bowling-2.9 "cannot roll after bonus roll for spare"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 3 2} 2
            "Cannot roll after game is over"
        bowling-2.10 "cannot roll after bonus rolls for strike"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 3 2} 2
            "Cannot roll after game is over"
    }

    foreach {name description rolls nextRoll result} $roll_error_cases {
        test $name $description -body {
            set game [Bowling new]
            foreach roll $rolls {
                $game roll $roll
            }
            $game roll $nextRoll
        } -returnCodes error -result $result
    }


    set score_error_cases {
        bowling-3.1 "an unstarted game cannot be scored"
            {}
            "Score cannot be taken until the end of the game"
        bowling-3.2 "an incomplete game cannot be scored"
            {0 0}
            "Score cannot be taken until the end of the game"
        bowling-3.3 "bonus rolls for a strike in the last frame must be rolled before score can be calculated"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10}
            "Score cannot be taken until the end of the game"
        bowling-3.4 "both bonus rolls for a strike in the last frame must be rolled before score can be calculated"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 10}
            "Score cannot be taken until the end of the game"
        bowling-3.5 "bonus roll for a spare in the last frame must be rolled before score can be calculated"
            {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 3}
            "Score cannot be taken until the end of the game"
    }

    foreach {name description rolls result} $score_error_cases {
        test $name $description -body {
            set game [Bowling new]
            foreach roll $rolls {
                $game roll $roll
            }
            $game score
        } -returnCodes error -result $result
    }

    cleanupTests
}
