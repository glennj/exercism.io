#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "state-of-tic-tac-toe.tcl"

# Won games

test state-1.1 "Finished game where X won via left column victory" -body {
    gamestate {
        "XOO"
        "X  "
        "X  "
    }
} -returnCodes ok -result "win"

skip state-1.2
test state-1.2 "Finished game where X won via middle column victory" -body {
    gamestate {
        "OXO"
        " X "
        " X "
    }
} -returnCodes ok -result "win"

skip state-1.3
test state-1.3 "Finished game where X won via right column victory" -body {
    gamestate {
        "OOX"
        "  X"
        "  X"
    }
} -returnCodes ok -result "win"

skip state-1.4
test state-1.4 "Finished game where O won via left column victory" -body {
    gamestate {
        "OXX"
        "OX "
        "O  "
    }
} -returnCodes ok -result "win"

skip state-1.5
test state-1.5 "Finished game where O won via middle column victory" -body {
    gamestate {
        "XOX"
        " OX"
        " O "
    }
} -returnCodes ok -result "win"

skip state-1.6
test state-1.6 "Finished game where O won via right column victory" -body {
    gamestate {
        "XXO"
        " XO"
        "  O"
    }
} -returnCodes ok -result "win"

skip state-1.7
test state-1.7 "Finished game where X won via top row victory" -body {
    gamestate {
        "XXX"
        "XOO"
        "O  "
    }
} -returnCodes ok -result "win"

skip state-1.8
test state-1.8 "Finished game where X won via middle row victory" -body {
    gamestate {
        "O  "
        "XXX"
        " O "
    }
} -returnCodes ok -result "win"

skip state-1.9
test state-1.9 "Finished game where X won via bottom row victory" -body {
    gamestate {
        " OO"
        "O X"
        "XXX"
    }
} -returnCodes ok -result "win"

skip state-1.10
test state-1.10 "Finished game where O won via top row victory" -body {
    gamestate {
        "OOO"
        "XXO"
        "XX "
    }
} -returnCodes ok -result "win"

skip state-1.11
test state-1.11 "Finished game where O won via middle row victory" -body {
    gamestate {
        "XX "
        "OOO"
        "X  "
    }
} -returnCodes ok -result "win"

skip state-1.12
test state-1.12 "Finished game where O won via bottom row victory" -body {
    gamestate {
        "XOX"
        " XX"
        "OOO"
    }
} -returnCodes ok -result "win"

skip state-1.13
test state-1.13 "Finished game where X won via falling diagonal victory" -body {
    gamestate {
        "XOO"
        " X "
        "  X"
    }
} -returnCodes ok -result "win"

skip state-1.14
test state-1.14 "Finished game where X won via rising diagonal victory" -body {
    gamestate {
        "O X"
        "OX "
        "X  "
    }
} -returnCodes ok -result "win"

skip state-1.15
test state-1.15 "Finished game where O won via falling diagonal victory" -body {
    gamestate {
        "OXX"
        "OOX"
        "X O"
    }
} -returnCodes ok -result "win"

skip state-1.16
test state-1.16 "Finished game where O won via rising diagonal victory" -body {
    gamestate {
        "  O"
        " OX"
        "OXX"
    }
} -returnCodes ok -result "win"

skip state-1.17
test state-1.17 "Finished game where X won via a row and a column victory" -body {
    gamestate {
        "XXX"
        "XOO"
        "XOO"
    }
} -returnCodes ok -result "win"

skip state-1.18
test state-1.18 "Finished game where X won via two diagonal victories" -body {
    gamestate {
        "XOX"
        "OXO"
        "XOX"
    }
} -returnCodes ok -result "win"

# Drawn games

skip state-2.1
test state-2.1 "Draw" -body {
    gamestate {
        "XOX"
        "XXO"
        "OXO"
    }
} -returnCodes ok -result "draw"

skip state-2.2
test state-2.2 "Another draw" -body {
    gamestate {
        "XXO"
        "OXX"
        "XOO"
    }
} -returnCodes ok -result "draw"


# Ongoing games

skip state-3.1
test state-3.1 "Ongoing game: one move in" -body {
    gamestate {
        "   "
        "X  "
        "   "
    }
} -returnCodes ok -result "ongoing"

skip state-3.2
test state-3.2 "Ongoing game: two moves in" -body {
    gamestate {
        "O  "
        " X "
        "   "
    }
} -returnCodes ok -result "ongoing"

skip state-3.3
test state-3.3 "Ongoing game: five moves in" -body {
    gamestate {
        "X  "
        " XO"
        "OX "
    }
} -returnCodes ok -result "ongoing"

# Invalid boards

skip state-4.1
test state-4.1 "Invalid board: X went twice" -body {
    gamestate {
        "XX "
        "   "
        "   "
    }
} -returnCodes error -result "Wrong turn order: X went twice"

skip state-4.2
test state-4.2 "Invalid board: O started" -body {
    gamestate {
        "OOX"
        "   "
        "   "
    }
} -returnCodes error -result "Wrong turn order: O started"

skip state-4.3
test state-4.3 "Invalid board: X won and O kept playing" -body {
    gamestate {
        "XXX"
        "OOO"
        "   "
    }
} -returnCodes error -result "Impossible board: game should have ended after the game was won"

skip state-4.4
test state-4.4 "Invalid board: players kept playing after a win" -body {
    gamestate {
        "XXX"
        "OOO"
        "XOX"
    }
} -returnCodes error -result "Impossible board: game should have ended after the game was won"


cleanupTests
