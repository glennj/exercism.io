#!/usr/bin/env tclsh
set version 1.1.0
package require tcltest
namespace import ::tcltest::*
source "perfect-numbers.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set cases {
        perfect-numbers-1.1        6 perfect   "Smallest perfect number is classified correctly"
        perfect-numbers-1.2       28 perfect   "Medium perfect number is classified correctly"
        perfect-numbers-1.3 33550336 perfect   "Large perfect number is classified correctly"
        perfect-numbers-2.1       12 abundant  "Smallest abundant number is classified correctly"
        perfect-numbers-2.2       30 abundant  "Medium abundant number is classified correctly"
        perfect-numbers-2.3 33550335 abundant  "Large abundant number is classified correctly"
        perfect-numbers-3.1        2 deficient "Smallest prime deficient number is classified correctly"
        perfect-numbers-3.2        4 deficient "Smallest non-prime deficient number is classified correctly"
        perfect-numbers-3.3       32 deficient "Medium deficient number is classified correctly"
        perfect-numbers-3.4 33550337 deficient "Large deficient number is classified correctly"
        perfect-numbers-3.5        1 deficient "Edge case (no factors other than itself) is classified correctly"
    }

    foreach {name number classification description} $cases {
        test $name $description -body {
            classify $number
        } -returnCodes ok -result $classification
    }

    cleanupTests
}
