#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "variable-length-quantity.tcl"

test vlq-1.1 "zero" -body {
    encode {0x00}
} -returnCodes ok -result {0x00}

skip vlq-1.2
test vlq-1.2 "arbitrary single byte" -body {
    encode {0x40}
} -returnCodes ok -result {0x40}

skip vlq-1.3
test vlq-1.3 "largest single byte" -body {
    encode {0x7F}
} -returnCodes ok -result {0x7F}

skip vlq-1.4
test vlq-1.4 "smallest double byte" -body {
    encode {0x80}
} -returnCodes ok -result {0x81 0x00}

skip vlq-1.5
test vlq-1.5 "arbitrary double byte" -body {
    encode {0x2000}
} -returnCodes ok -result {0xC0 0x00}

skip vlq-1.6
test vlq-1.6 "largest double byte" -body {
    encode {0x3FFF}
} -returnCodes ok -result {0xFF 0x7F}

skip vlq-1.7
test vlq-1.7 "smallest triple byte" -body {
    encode {0x4000}
} -returnCodes ok -result {0x81 0x80 0x00}

skip vlq-1.8
test vlq-1.8 "arbitrary triple byte" -body {
    encode {0x100000}
} -returnCodes ok -result {0xC0 0x80 0x00}

skip vlq-1.9
test vlq-1.9 "largest triple byte" -body {
    encode {0x1FFFFF}
} -returnCodes ok -result {0xFF 0xFF 0x7F}

skip vlq-1.10
test vlq-1.10 "smallest quadruple byte" -body {
    encode {0x200000}
} -returnCodes ok -result {0x81 0x80 0x80 0x00}

skip vlq-1.11
test vlq-1.11 "arbitrary quadruple byte" -body {
    encode {0x8000000}
} -returnCodes ok -result {0xC0 0x80 0x80 0x00}

skip vlq-1.12
test vlq-1.12 "largest quadruple byte" -body {
    encode {0x0FFFFFFF}
} -returnCodes ok -result {0xFF 0xFF 0xFF 0x7F}

skip vlq-1.13
test vlq-1.13 "smallest quintuple byte" -body {
    encode {0x10000000}
} -returnCodes ok -result {0x81 0x80 0x80 0x80 0x00}

skip vlq-1.14
test vlq-1.14 "arbitrary quintuple byte" -body {
    encode {0xFF000000}
} -returnCodes ok -result {0x8F 0xF8 0x80 0x80 0x00}

skip vlq-1.15
test vlq-1.15 "maximum 32-bit integer input" -body {
    encode {0xFFFFFFFF}
} -returnCodes ok -result {0x8F 0xFF 0xFF 0xFF 0x7F}

skip vlq-1.16
test vlq-1.16 "two single-byte values" -body {
    encode {0x40 0x7F}
} -returnCodes ok -result {0x40 0x7F}

skip vlq-1.17
test vlq-1.17 "two multi-byte values" -body {
    encode {0x4000 0x123456}
} -returnCodes ok -result {0x81 0x80 0x00 0xC8 0xE8 0x56}

skip vlq-1.18
test vlq-1.18 "many multi-byte values" -body {
    encode {0x2000 0x123456 0x0FFFFFFF 0x00 0x3FFF 0x4000}
} -returnCodes ok -result {0xC0 0x00 0xC8 0xE8 0x56 0xFF 0xFF 0xFF 0x7F 0x00 0xFF 0x7F 0x81 0x80 0x00}


skip vlq-2.1
test vlq-2.1 "one byte" -body {
    decode {0x7F}
} -returnCodes ok -result {0x7F}

skip vlq-2.2
test vlq-2.2 "two bytes" -body {
    decode {0xC0 0x00}
} -returnCodes ok -result {0x2000}

skip vlq-2.3
test vlq-2.3 "three bytes" -body {
    decode {0xFF 0xFF 0x7F}
} -returnCodes ok -result {0x1FFFFF}

skip vlq-2.4
test vlq-2.4 "four bytes" -body {
    decode {0x81 0x80 0x80 0x00}
} -returnCodes ok -result {0x200000}

skip vlq-2.5
test vlq-2.5 "maximum 32-bit integer" -body {
    decode {0x8F 0xFF 0xFF 0xFF 0x7F}
} -returnCodes ok -result {0xFFFFFFFF}

skip vlq-2.6
test vlq-2.6 "multiple values" -body {
    decode {0xC0 0x00 0xC8 0xE8 0x56 0xFF 0xFF 0xFF 0x7F 0x00 0xFF 0x7F 0x81 0x80 0x00}
} -returnCodes ok -result {0x2000 0x123456 0xFFFFFFF 0x0 0x3FFF 0x4000}


skip vlq-3.1
test vlq-3.1 "incomplete sequence causes error" -body {
    decode {0xFF}
} -returnCodes error -result "incomplete sequence"

skip vlq-3.2
test vlq-3.2 "incomplete sequence causes error even if value is zero" -body {
    decode {0x80}
} -returnCodes error -result "incomplete sequence"


cleanupTests

