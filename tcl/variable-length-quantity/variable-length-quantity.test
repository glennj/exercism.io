#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "variable-length-quantity.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set encode_cases {
        vlq-1.1 "zero"
            {0x00}
            {0x00}
        vlq-1.2 "arbitrary single byte"
            {0x40}
            {0x40}
        vlq-1.3 "largest single byte"
            {0x7F}
            {0x7F}
        vlq-1.4 "smallest double byte"
            {0x80}
            {0x81 0x00}
        vlq-1.5 "arbitrary double byte"
            {0x2000}
            {0xC0 0x00}
        vlq-1.6 "largest double byte"
            {0x3FFF}
            {0xFF 0x7F}
        vlq-1.7 "smallest triple byte"
            {0x4000}
            {0x81 0x80 0x00}
        vlq-1.8 "arbitrary triple byte"
            {0x100000}
            {0xC0 0x80 0x00}
        vlq-1.9 "largest triple byte"
            {0x1FFFFF}
            {0xFF 0xFF 0x7F}
        vlq-1.10 "smallest quadruple byte"
            {0x200000}
            {0x81 0x80 0x80 0x00}
        vlq-1.11 "arbitrary quadruple byte"
            {0x8000000}
            {0xC0 0x80 0x80 0x00}
        vlq-1.12 "largest quadruple byte"
            {0x0FFFFFFF}
            {0xFF 0xFF 0xFF 0x7F}
        vlq-1.13 "smallest quintuple byte"
            {0x10000000}
            {0x81 0x80 0x80 0x80 0x00}
        vlq-1.14 "arbitrary quintuple byte"
            {0xFF000000}
            {0x8F 0xF8 0x80 0x80 0x00}
        vlq-1.15 "maximum 32-bit integer input"
            {0xFFFFFFFF}
            {0x8F 0xFF 0xFF 0xFF 0x7F}
        vlq-1.16 "two single-byte values"
            {0x40 0x7F}
            {0x40 0x7F}
        vlq-1.17 "two multi-byte values"
            {0x4000 0x123456}
            {0x81 0x80 0x00 0xC8 0xE8 0x56}
        vlq-1.18 "many multi-byte values"
            {0x2000 0x123456 0x0FFFFFFF 0x00 0x3FFF 0x4000}
            {0xC0 0x00 0xC8 0xE8 0x56 0xFF 0xFF 0xFF 0x7F 0x00 0xFF 0x7F 0x81 0x80 0x00}
    }
    foreach {name description input result} $encode_cases {
        test $name $description -body {
            encode $input
        } -returnCodes ok -result $result
    }

    set decode_cases {
        vlq-2.1 "one byte"
            {0x7F}
            {0x7F}
        vlq-2.2 "two bytes"
            {0xC0 0x00}
            {0x2000}
        vlq-2.3 "three bytes"
            {0xFF 0xFF 0x7F}
            {0x1FFFFF}
        vlq-2.4 "four bytes"
            {0x81 0x80 0x80 0x00}
            {0x200000}
        vlq-2.5 "maximum 32-bit integer"
            {0x8F 0xFF 0xFF 0xFF 0x7F}
            {0xFFFFFFFF}
        vlq-2.6 "multiple values"
            {0xC0 0x00 0xC8 0xE8 0x56 0xFF 0xFF 0xFF 0x7F 0x00 0xFF 0x7F 0x81 0x80 0x00}
            {0x2000 0x123456 0xFFFFFFF 0x0 0x3FFF 0x4000}
    }
    foreach {name description input result} $decode_cases {
        test $name $description -body {
            decode $input
        } -returnCodes ok -result $result
    }

    set decode_errors {
        vlq-3.1 "incomplete sequence causes error"
            {0xFF}
            "incomplete sequence"
        vlq-3.2 "incomplete sequence causes error even if value is zero"
            {0x80}
            "incomplete sequence"
    }
    foreach {name description input result} $decode_errors {
        test $name $description -body {
            decode $input
        } -returnCodes error -result $result
    }

    cleanupTests
}
