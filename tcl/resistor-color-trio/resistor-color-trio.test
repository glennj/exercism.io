#!/usr/bin/env tclsh
set version 1.0.0
package require tcltest
namespace import ::tcltest::*
source "resistor-color-trio.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

# The expected value is one of a list of values.
proc inListMatch {expectedList actual} {
    return [expr {$actual in $expectedList}]
}
customMatch inList inListMatch


if {$::argv0 eq [info script]} {

    set cases {
        resistor-color-trio-1 {orange orange black} "33 ohms" "orange and orange and black"
        resistor-color-trio-2 {blue grey brown} "680 ohms" "blue and grey and brown"
        resistor-color-trio-3 {red black red} "2 kiloohms" "red and black and red"
        resistor-color-trio-4 {green brown orange} "51 kiloohms" "green and brown and orange"
        resistor-color-trio-5 {yellow violet yellow} "470 kiloohms" "yellow and violet and yellow"
        resistor-color-trio-6 {yellow red blue} "42 megaohms" "yellow and red and blue"
        resistor-color-trio-7 {white white white} "99 gigaohms" "maximum possible is all white"
    }

    foreach {name colors result description} $cases {
        test $name $description -body {
            resistorColor::label {*}$colors
        } -returnCodes ok -result $result
    }

    # The canonical data for this exercise does not specify which
    # is the expected result for this kind of scenario.
    test resistor-color-trio-8 "value between 1000 and 10,000" -body {
        resistorColor::label brown red red
    } -returnCodes ok -match inList -result {"1200 ohms" "1.2 kiloohms"}

    cleanupTests
}
