#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "all-your-base.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set cases {
        all-your-base-1.1 "single bit one to decimal" 
            2 {1} 10 {1}
        all-your-base-1.2 "binary to single decimal" 
            2 {1 0 1} 10 {5}
        all-your-base-1.3 "single decimal to binary" 
            10 {5} 2 {1 0 1}
        all-your-base-1.4 "binary to multiple decimal" 
            2 {1 0 1 0 1 0} 10 {4 2}
        all-your-base-1.5 "decimal to binary" 
            10 {4 2} 2 {1 0 1 0 1 0}
        all-your-base-1.6 "trinary to hexadecimal" 
            3 {1 1 2 0} 16 {2 10}
        all-your-base-1.7 "hexadecimal to trinary" 
            16 {2 10} 3 {1 1 2 0}
        all-your-base-1.8 "15-bit integer" 
            97 {3 46 60} 73 {6 10 45}
        all-your-base-1.9 "empty list" 
            2 {} 10 {0}
        all-your-base-1.10 "single zero" 
            10 {0} 2 {0}
        all-your-base-1.11 "multiple zeros" 
            10 {0 0 0} 2 {0}
        all-your-base-1.12 "leading zeros" 
            7 {0 6 0} 10 {4 2}
    }

    foreach {name description inputBase digits outputBase rebasedDigits} $cases {
        test $name $description -body {
            rebase $inputBase $digits $outputBase
        } -returnCodes ok -result $rebasedDigits
    }

    set errorCases {
        all-your-base-2.1 "input base is one"
            1 {0} 10 "input base must be >= 2"
        all-your-base-2.2 "input base is zero"
            0 {} 10 "input base must be >= 2"
        all-your-base-2.2 "input base is negative"
            -2 {1} 10 "input base must be >= 2"
        all-your-base-2.3 "negative digit"
            2 {1 -1 1 0 1 0} 10 "all digits must satisfy 0 <= d < input base"
        all-your-base-2.4 "invalid positive digit"
            2 {1 2 1 0 1 0} 10 "all digits must satisfy 0 <= d < input base"
        all-your-base-2.5 "output base is one"
            2 {1 0 1 0 1 0} 1 "output base must be >= 2"
        all-your-base-2.6 "output base is zero"
            10 {7} 0 "output base must be >= 2"
        all-your-base-2.7 "output base is negative"
            2 {1} -7 "output base must be >= 2"
        all-your-base-2.8 "both bases are negative"
            -2 {1} -7 "input base must be >= 2"
    }
    
    foreach {name description inputBase digits outputBase errmsg} $errorCases {
        test $name $description -body {
            rebase $inputBase $digits $outputBase
        } -returnCodes error -result $errmsg
    }

    cleanupTests
}
