#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "linked-list.tcl"

test linked-list-1a "pop gets element from the list" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 7
    lappend result [$ll pop]
} -returnCodes ok -result 7

skip linked-list-1
test linked-list-1 "push/pop respectively add/remove at the end of the list" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 11
    $ll push 13
    lappend result [$ll pop]
    lappend result [$ll pop]
} -returnCodes ok -result {13 11}

skip linked-list-2a
test linked-list-2a "shift gets an element from the list" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 17
    lappend result [$ll shift]
} -returnCodes ok -result 17

skip linked-list-2
test linked-list-2 "shift gets first element from the list" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 23
    $ll push 5
    lappend result [$ll shift]
    lappend result [$ll shift]
} -returnCodes ok -result {23 5}

skip linked-list-3
test linked-list-3 "unshift adds element at start of the list" -body {
    set result {}
    set ll [LinkedList new]
    $ll unshift 23
    $ll unshift 5
    lappend result [$ll shift]
    lappend result [$ll shift]
} -returnCodes ok -result {5 23}

skip linked-list-4
test linked-list-4 "unshift pop" -body {
    set result {}
    set ll [LinkedList new]
    $ll unshift 10
    $ll unshift 20
    lappend result [$ll pop]
    lappend result [$ll pop]
} -returnCodes ok -result {10 20}

skip linked-list-5
test linked-list-5 "pop, push, shift, and unshift can be used in any order" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 1
    $ll push 2
    lappend result [$ll pop]
    $ll push 3
    lappend result [$ll shift]
    $ll unshift 4
    $ll push 5
    lappend result [$ll shift]
    lappend result [$ll pop]
    lappend result [$ll shift]
} -returnCodes ok -result {2 1 4 5 3}

skip linked-list-6
test linked-list-6 "count an empty list" -body {
    set ll [LinkedList new]
    $ll length
} -returnCodes ok -result 0

skip linked-list-7
test linked-list-7 "count a list with items" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 31
    lappend result [$ll length]
    $ll unshift 43
    lappend result [$ll length]
    $ll shift
    lappend result [$ll length]
    $ll pop
    lappend result [$ll length]
} -returnCodes ok -result {1 2 1 0}

skip linked-list-8
test linked-list-8 "popping to empty doesn't break the list" -body {
    set ll [LinkedList new]
    $ll push 41
    $ll push 59
    $ll pop
    $ll pop
    $ll push 47
    $ll length
} -returnCodes ok -result 1

skip linked-list-9
test linked-list-9 "shifting to empty doesn't break the list" -body {
    set ll [LinkedList new]
    $ll push 41
    $ll push 59
    $ll shift
    $ll shift
    $ll push 47
    $ll length
} -returnCodes ok -result 1

skip linked-list-10
test linked-list-10 "deletes the only element" -body {
    set ll [LinkedList new]
    $ll push 61
    $ll delete 61
    $ll length
} -returnCodes ok -result 0

skip linked-list-11
test linked-list-11 "deletes the element with the specified value from the list" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 71
    $ll push 83
    $ll push 79
    $ll delete 83
    lappend result [$ll length]
    lappend result [$ll pop]
    lappend result [$ll shift]
} -returnCodes ok -result {2 79 71}

skip linked-list-12
test linked-list-12 "deletes the element with the specified value from the tail, reassigns tail" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 71
    $ll push 83
    $ll push 79
    $ll delete 83
    lappend result [$ll length]
    lappend result [$ll pop]
    lappend result [$ll pop]
} -returnCodes ok -result {2 79 71}

skip linked-list-13
test linked-list-13 "deletes the element with the specified value from the tail, reassigns head" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 71
    $ll push 83
    $ll push 79
    $ll delete 83
    lappend result [$ll length]
    lappend result [$ll shift]
    lappend result [$ll shift]
} -returnCodes ok -result {2 71 79}

skip linked-list-14
test linked-list-14 "deletes the first of two elements" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 97
    $ll push 101
    $ll delete 97
    lappend result [$ll length]
    lappend result [$ll pop]
} -returnCodes ok -result {1 101}

skip linked-list-15
test linked-list-15 "deletes the second of two elements" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 97
    $ll push 101
    $ll delete 101
    lappend result [$ll length]
    lappend result [$ll pop]
} -returnCodes ok -result {1 97}

skip linked-list-16
test linked-list-16 "deletes does not modify the list if the element is not found" -body {
    set ll [LinkedList new]
    $ll push 89
    $ll delete 103
    $ll length
} -returnCodes ok -result 1

skip linked-list-17
test linked-list-17 "deletes only the first occurrence" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 73
    $ll push 9
    $ll push 9
    $ll push 107
    $ll delete 9
    $ll length
    lappend result [$ll length]
    lappend result [$ll pop]
    lappend result [$ll pop]
    lappend result [$ll pop]
} -returnCodes ok -result {3 107 9 73}

# bonus
skip linked-list-b1
test linked-list-b1 "iteration" -body {
    set result {}
    set ll [LinkedList new]
    $ll push 10
    $ll push 20
    $ll push 30
    $ll for value {lappend result [expr {$value / 2}]}
    set result
} -returnCodes ok -result {5 10 15}

cleanupTests
