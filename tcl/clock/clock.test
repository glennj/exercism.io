#!/usr/bin/env tclsh
set version 2.4.0
package require tcltest
namespace import ::tcltest::*
source "clock.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

proc booleanMatch {expected actual} {
    return [expr {
        [string is boolean -strict $expected] &&
        [string is boolean -strict $actual] &&
        (($expected && $actual) || (!$expected && !$actual))
    }]
}
customMatch boolean booleanMatch

if {$::argv0 eq [info script]} {

    set createCases {
        clock-1.1      8     0  "08:00"  "on the hour"
        clock-1.2     11     9  "11:09"  "past the hour"
        clock-1.3     24     0  "00:00"  "midnight is zero hours"
        clock-1.4     25     0  "01:00"  "hour rolls over"
        clock-1.5    100     0  "04:00"  "hour rolls over continuously"
        clock-1.6      1    60  "02:00"  "sixty minutes is next hour"
        clock-1.7      0   160  "02:40"  "minutes roll over"
        clock-1.8      0  1723  "04:43"  "minutes roll over continuously"
        clock-1.9     25   160  "03:40"  "hour and minutes roll over"
        clock-1.10   201  3001  "11:01"  "hour and minutes roll over continuously"
        clock-1.11    72  8640  "00:00"  "hour and minutes roll over to exactly midnight"
        clock-1.12    -1    15  "23:15"  "negative hour"
        clock-1.13   -25     0  "23:00"  "negative hour rolls over"
        clock-1.14   -91     0  "05:00"  "negative hour rolls over continuously"
        clock-1.15     1   -40  "00:20"  "negative minutes"
        clock-1.16     1  -160  "22:20"  "negative minutes roll over"
        clock-1.17     1 -4820  "16:40"  "negative minutes roll over continuously"
        clock-1.18     2   -60  "01:00"  "negative sixty minutes is previous hour"
        clock-1.19   -25  -160  "20:20"  "negative hour and minutes both roll over"
        clock-1.20  -121 -5810  "22:10"  "negative hour and minutes both roll over continuously"
    }

    foreach {name hour minute result description} $createCases {
        test $name $description -body {
            [Clock new $hour $minute] toString
        } -returnCodes ok -result $result
    }

    set addCases {
        clock-2.1  10   0     3  "10:03"  "add minutes"
        clock-2.2   6  41     0  "06:41"  "add no minutes"
        clock-2.3   0  45    40  "01:25"  "add to next hour"
        clock-2.4  10   0    61  "11:01"  "add more than one hour"
        clock-2.5   0  45   160  "03:25"  "add more than two hours with carry"
        clock-2.6  23  59     2  "00:01"  "add across midnight"
        clock-2.7   5  32  1500  "06:32"  "add more than one day (1500 min = 25 hrs)"
        clock-2.8   1   1  3500  "11:21"  "add more than two days"
    }

    foreach {name hour minute delta result description} $addCases {
        test $name $description -body {
            set c [Clock new $hour $minute]
            [$c add $delta] toString
        } -returnCodes ok -result $result
    }

    set subtractCases {
        clock-3.1  10  3     3  "10:00"  "subtract minutes"
        clock-3.2  10  3    30  "09:33"  "subtract to previous hour"
        clock-3.3  10  3    70  "08:53"  "subtract more than an hour"
        clock-3.4   0  3     4  "23:59"  "subtract across midnight"
        clock-3.5   0  0   160  "21:20"  "subtract more than two hours"
        clock-3.6   6 15   160  "03:35"  "subtract more than two hours with borrow"
        clock-3.7   5 32  1500  "04:32"  "subtract more than one day (1500 min = 25 hrs)"
        clock-3.8   2 20  3000  "00:20"  "subtract more than two days"
    }

    foreach {name hour minute delta result description} $subtractCases {
        test $name $description -body {
            set c [Clock new $hour $minute]
            [$c subtract $delta] toString
        } -returnCodes ok -result $result
    }

    set equalityCases {
        clock-4.1   15 37   15     37  true "clocks with same time"
        clock-4.2   15 36   15     37 false "clocks a minute apart"
        clock-4.3   14 37   15     37 false "clocks an hour apart"
        clock-4.4   10 37   34     37  true "clocks with hour overflow"
        clock-4.5    3 11   99     11  true "clocks with hour overflow by several days"
        clock-4.6   22 40   -2     40  true "clocks with negative hour"
        clock-4.7   17  3  -31      3  true "clocks with negative hour that wraps"
        clock-4.8   13 49  -83     49  true "clocks with negative hour that wraps multiple times"
        clock-4.9    0  1    0   1441  true "clocks with minute overflow"
        clock-4.10   2  2    2   4322  true "clocks with minute overflow by several days"
        clock-4.11   2 40    3    -20  true "clocks with negative minute"
        clock-4.12   4 10    5  -1490  true "clocks with negative minute that wraps"
        clock-4.13   6 15    6  -4305  true "clocks with negative minute that wraps multiple times"
        clock-4.14   7 32  -12   -268  true "clocks with negative hours and minutes"
        clock-4.15  18  7  -54 -11513  true "clocks with negative hours and minutes that wrap"
        clock-4.16  24  0    0      0  true "full clock and zeroed clock"
    }

    foreach {name h1 m1 h2 m2 result description} $equalityCases {
        test $name $description -body {
            set c1 [Clock new $h1 $m1]
            set c2 [Clock new $h2 $m2]
            $c1 equals $c2
        } -returnCodes ok -match boolean -result $result
    }

    test clock-5.1 "bonus: non-alpha method name" -body {
        set c1 [Clock new 8 1]
        set c2 [Clock new 8 2]
        $c1 == $c2
    } -returnCodes ok -match boolean -result false

    cleanupTests
}
