#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "clock.tcl"

####################################
test clock-1.1 "on the hour" -body {
    [Clock new 8 0] toString
} -returnCodes OK -result "08:00"

skip clock-1.2
test clock-1.2 "past the hour" -body {
    [Clock new 11 9] toString
} -returnCodes ok -result "11:09"

skip clock-1.3
test clock-1.3 "midnight is zero hours" -body {
    [Clock new 24 0] toString
} -returnCodes ok -result "00:00"

skip clock-1.4
test clock-1.4 "hour rolls over" -body {
    [Clock new 25 0] toString
} -returnCodes ok -result "01:00"

skip clock-1.5
test clock-1.5 "hour rolls over continuously" -body {
    [Clock new 100 0] toString
} -returnCodes ok -result "04:00"

skip clock-1.6
test clock-1.6 "sixty minutes is next hour" -body {
    [Clock new 1 60] toString
} -returnCodes ok -result "02:00"

skip clock-1.7
test clock-1.7 "minutes roll over" -body {
    [Clock new 0 160] toString
} -returnCodes ok -result "02:40"

skip clock-1.8
test clock-1.8 "minutes roll over continuously" -body {
    [Clock new 0 1723] toString
} -returnCodes ok -result "04:43"

skip clock-1.9
test clock-1.9 "hour and minutes roll over" -body {
    [Clock new 25 160] toString
} -returnCodes ok -result "03:40"

skip clock-1.10
test clock-1.10 "hour and minutes roll over continuously" -body {
    [Clock new 201 3001] toString
} -returnCodes ok -result "11:01"

skip clock-1.11
test clock-1.11 "hour and minutes roll over to exactly midnight" -body {
    [Clock new 72 8640] toString
} -returnCodes ok -result "00:00"

skip clock-1.12
test clock-1.12 "negative hour" -body {
    [Clock new -1 15] toString
} -returnCodes ok -result "23:15"

skip clock-1.13
test clock-1.13 "negative hour rolls over" -body {
    [Clock new -25 0] toString
} -returnCodes ok -result "23:00"

skip clock-1.14
test clock-1.14 "negative hour rolls over continuously" -body {
    [Clock new -91 0] toString
} -returnCodes ok -result "05:00"

skip clock-1.15
test clock-1.15 "negative minutes" -body {
    [Clock new 1 -40] toString
} -returnCodes ok -result "00:20"

skip clock-1.16
test clock-1.16 "negative minutes roll over" -body {
    [Clock new 1 -160] toString
} -returnCodes ok -result "22:20"

skip clock-1.17
test clock-1.17 "negative minutes roll over continuously" -body {
    [Clock new 1 -4820] toString
} -returnCodes ok -result "16:40"

skip clock-1.18
test clock-1.18 "negative sixty minutes is previous hour" -body {
    [Clock new 2 -60] toString
} -returnCodes ok -result "01:00"

skip clock-1.19
test clock-1.19 "negative hour and minutes both roll over" -body {
    [Clock new -25 -160] toString
} -returnCodes ok -result "20:20"

skip clock-1.20
test clock-1.20 "negative hour and minutes both roll over continuously" -body {
    [Clock new -121 -5810] toString
} -returnCodes ok -result "22:10"


####################################
skip clock-2.1
test clock-2.1 "add minutes" -body {
    set c [Clock new 10 0]
    [$c add 3] toString
} -returnCodes ok -result "10:03"

skip clock-2.2
test clock-2.2 "add no minutes" -body {
    set c [Clock new 6 41]
    [$c add 0] toString
} -returnCodes ok -result "06:41"

skip clock-2.3
test clock-2.3 "add to next hour" -body {
    set c [Clock new 0 45]
    [$c add 40] toString
} -returnCodes ok -result "01:25"

skip clock-2.4
test clock-2.4 "add more than one hour" -body {
    set c [Clock new 10 0]
    [$c add 61] toString
} -returnCodes ok -result "11:01"

skip clock-2.5
test clock-2.5 "add more than two hours with carry" -body {
    set c [Clock new 0 45]
    [$c add 160] toString
} -returnCodes ok -result "03:25"

skip clock-2.6
test clock-2.6 "add across midnight" -body {
    set c [Clock new 23 59]
    [$c add 2] toString
} -returnCodes ok -result "00:01"

skip clock-2.7
test clock-2.7 "add more than one day (1500 min = 25 hrs)" -body {
    set c [Clock new 5 32]
    [$c add 1500] toString
} -returnCodes ok -result "06:32"

skip clock-2.8
test clock-2.8 "add more than two days" -body {
    set c [Clock new 1 1]
    [$c add 3500] toString
} -returnCodes ok -result "11:21"

skip clock-2.9
test clock-2.9 "add a negative value" -body {
    set c [Clock new 12 0]
    [$c add -30] toString
} -returnCodes ok -result "11:30"


####################################
skip clock-3.1
test clock-3.1 "subtract minutes" -body {
    set c [Clock new 10 3]
    [$c subtract 3] toString
} -returnCodes ok -result "10:00"

skip clock-3.2
test clock-3.2 "subtract to previous hour" -body {
    set c [Clock new 10 3]
    [$c subtract 30] toString
} -returnCodes ok -result "09:33"

skip clock-3.3
test clock-3.3 "subtract more than an hour" -body {
    set c [Clock new 10 3]
    [$c subtract 70] toString
} -returnCodes ok -result "08:53"

skip clock-3.4
test clock-3.4 "subtract across midnight" -body {
    set c [Clock new 0 3]
    [$c subtract 4] toString
} -returnCodes ok -result "23:59"

skip clock-3.5
test clock-3.5 "subtract more than two hours" -body {
    set c [Clock new 0 0]
    [$c subtract 160] toString
} -returnCodes ok -result "21:20"

skip clock-3.6
test clock-3.6 "subtract more than two hours with borrow" -body {
    set c [Clock new 6 15]
    [$c subtract 160] toString
} -returnCodes ok -result "03:35"

skip clock-3.7
test clock-3.7 "subtract more than one day (1500 min = 25 hrs)" -body {
    set c [Clock new 5 32]
    [$c subtract 1500] toString
} -returnCodes ok -result "04:32"

skip clock-3.8
test clock-3.8 "subtract more than two days" -body {
    set c [Clock new 2 20]
    [$c subtract 3000] toString
} -returnCodes ok -result "00:20"

skip clock-3.9
test clock-3.9 "subtract a negative value" -body {
    set c [Clock new 12 0]
    [$c subtract -30] toString
} -returnCodes ok -result "12:30"


####################################
skip clock-4.1
test clock-4.1 "clocks with same time" -body {
    set c1 [Clock new 15 37]
    set c2 [Clock new 15 37]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.2
test clock-4.2 "clocks a minute apart" -body {
    set c1 [Clock new 15 36]
    set c2 [Clock new 15 37]
    $c1 equals $c2
} -returnCodes OK -match boolean -result false

skip clock-4.3
test clock-4.3 "clocks an hour apart" -body {
    set c1 [Clock new 14 37]
    set c2 [Clock new 15 37]
    $c1 equals $c2
} -returnCodes OK -match boolean -result false

skip clock-4.4
test clock-4.4 "clocks with hour overflow" -body {
    set c1 [Clock new 10 37]
    set c2 [Clock new 34 37]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.5
test clock-4.5 "clocks with hour overflow by several days" -body {
    set c1 [Clock new 3 11]
    set c2 [Clock new 99 11]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.6
test clock-4.6 "clocks with negative hour" -body {
    set c1 [Clock new 22 40]
    set c2 [Clock new -2 40]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.7
test clock-4.7 "clocks with negative hour that wraps" -body {
    set c1 [Clock new 17 3]
    set c2 [Clock new -31 3]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.8
test clock-4.8 "clocks with negative hour that wraps multiple times" -body {
    set c1 [Clock new 13 49]
    set c2 [Clock new -83 49]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.9
test clock-4.9 "clocks with minute overflow" -body {
    set c1 [Clock new 0 1]
    set c2 [Clock new 0 1441]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.10
test clock-4.10 "clocks with minute overflow by several days" -body {
    set c1 [Clock new 2 2]
    set c2 [Clock new 2 4322]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.11
test clock-4.11 "clocks with negative minute" -body {
    set c1 [Clock new 2 40]
    set c2 [Clock new 3 -20]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.12
test clock-4.12 "clocks with negative minute that wraps" -body {
    set c1 [Clock new 4 10]
    set c2 [Clock new 5 -1490]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.13
test clock-4.13 "clocks with negative minute that wraps multiple times" -body {
    set c1 [Clock new 6 15]
    set c2 [Clock new 6 -4305]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.14
test clock-4.14 "clocks with negative hours and minutes" -body {
    set c1 [Clock new 7 32]
    set c2 [Clock new -12 -268]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.15
test clock-4.15 "clocks with negative hours and minutes that wrap" -body {
    set c1 [Clock new 18 7]
    set c2 [Clock new -54 -11513]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true

skip clock-4.16
test clock-4.16 "full clock and zeroed clock" -body {
    set c1 [Clock new 24 0]
    set c2 [Clock new 0 0]
    $c1 equals $c2
} -returnCodes OK -match boolean -result true


####################################
skip clock-5.1
test clock-5.1 "bonus: non-alpha method name" -body {
    set c1 [Clock new 8 1]
    set c2 [Clock new 8 2]
    $c1 == $c2
} -returnCodes ok -match boolean -result false

cleanupTests
