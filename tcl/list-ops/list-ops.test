#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "list-ops.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set appendCases {
        list-ops-1.1 "append empty lists" {} {} {}
        list-ops-1.2 "append list to empty list" {} {1 2 3 4} {1 2 3 4}
        list-ops-1.3 "append empty list to list" {1 2 3 4} {} {1 2 3 4}
        list-ops-1.4 "append non-empty lists" {1 2} {2 3 4 5} {1 2 2 3 4 5}
    }
    foreach {name description list1 list2 result} $appendCases {
        test $name $description -body {
            listOps::append list1 $list2
            set list1
        } -returnCodes ok -result $result
    }

    set concatCases {
        list-ops-2.1 "concat empty list" {} {}
        list-ops-2.2 "concat list of lists" {{1 2} {3} {} {4 5 6}} {1 2 3 4 5 6}
        list-ops-2.3
            "concat list of nested lists"
            {{{1} {2}} {{3}} {{}} {{4 5 6}}}
            {1 2 3 {} {4 5 6}}
    }

    foreach {name description lists result} $concatCases {
        test $name $description -body {
            listOps::concat $lists
        } -returnCodes ok -result $result
    }

    set filterCases {
        list-ops-3.1 "filter empty list" {} {x {expr {$x % 2 == 1}}} {}
        list-ops-3.2 "filter non-empty list" {1 2 3 5} {x {expr {$x % 2 == 1}}} {1 3 5}
    }

    foreach {name description list func result} $filterCases {
        test $name $description -body {
            listOps::filter $list $func
        } -returnCodes ok -result $result
    }

    set lengthCases {
        list-ops-4.1 "length empty list" {} 0
        list-ops-4.2 "length non-empty list" {1 2 3 4} 4
    }

    foreach {name description list result} $lengthCases {
        test $name $description -body {
            listOps::length $list
        } -returnCodes ok -result $result
    }

    set mapCases {
        list-ops-5.1 "map empty list" {} {x {expr {$x + 1}}} {}
        list-ops-5.2 "map non-empty list" {1 3 5 7} {x {expr {$x + 1}}} {2 4 6 8}
    }

    foreach {name description list func result} $mapCases {
        test $name $description -body {
            listOps::map $list $func
        } -returnCodes ok -result $result
    }

    set foldlCases {
        list-ops-6.1 "foldl empty list" 
            {} 2 {{acc elem} {expr {$acc * $elem}}} 2
        list-ops-6.2
            "foldl direction independent function applied to non-empty list"
            {1 2 3 4} 5 {{acc elem} {expr {$acc + $elem}}} 15
        list-ops-6.3
            "foldl direction dependent function applied to non-empty list"
            {2 5} 5 {{acc elem} {expr {$acc / $elem}}} 0
    }

    foreach {name description list initial func result} $foldlCases {
        test $name $description -body {
            listOps::foldl $list $initial $func
        } -returnCodes ok -result $result
    }

    set reverseCases {
        list-ops-7.1 "reverse empty list" {} {}
        list-ops-7.2 "reverse non-empty list" {1 3 5 7} {7 5 3 1}
        list-ops-7.3
            "reverse list of lists is not flattened"
            {{1 2} {3} {} {4 5 6}} {{4 5 6} {} 3 {1 2}}
    }

    foreach {name description list result} $reverseCases {
        test $name $description -body {
            listOps::reverse $list
        } -returnCodes ok -result $result
    }

    set foldrCases {
        list-ops-8.1 "foldr empty list"
            {} 2 {{elem acc} {expr {$elem * $acc}}} 2
        list-ops-8.2
          "foldr direction independent function applied to non-empty list"
          {1 2 3 4} 5 {{elem acc} {expr {$elem + $acc}}}
          15
        list-ops-8.3
          "foldr direction dependent function applied to non-empty list"
          {1 2 3 4} 24.0 {{elem acc} {expr {1.0 * $elem / $acc}}} 9.0
    }

    foreach {name description list initial func result} $foldrCases {
        test $name $description -body {
            listOps::foldr $list $initial $func
        } -returnCodes ok -result $result
    }

    cleanupTests
}
