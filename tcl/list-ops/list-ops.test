#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "list-ops.tcl"

# append
test list-ops-1.1 "append empty lists" -body {
    set list1 {}
    listOps::append list1 {}
    set list1
} -returnCodes ok -result {}

skip list-ops-1.*

test list-ops-1.2 "append list to empty list" -body {
    set list1 {}
    listOps::append list1 {1 2 3 4}
    set list1
} -returnCodes ok -result {1 2 3 4}

test list-ops-1.3 "append empty list to list" -body {
    set list1 {1 2 3 4}
    listOps::append list1 {}
    set list1
} -returnCodes ok -result {1 2 3 4}

test list-ops-1.4 "append non-empty lists" -body {
    set list1 {1 2}
    listOps::append list1 {2 3 4 5}
    set list1
} -returnCodes ok -result {1 2 2 3 4 5}

#concat
skip list-ops-2.*

test list-ops-2.1 "concat empty list" -body {
    listOps::concat {}
} -returnCodes ok -result {}

test list-ops-2.2 "concat list of lists" -body {
    listOps::concat {{1 2} {3} {} {4 5 6}}
} -returnCodes ok -result {1 2 3 4 5 6}

test list-ops-2.3 "concat list of nested lists" -body {
    listOps::concat {{{1} {2}} {{3}} {{}} {{4 5 6}}}
} -returnCodes ok -result {1 2 3 {} {4 5 6}}

# filter
skip list-ops-3.*

test list-ops-3.1 "filter empty list" -body {
    listOps::filter {} {x {expr {$x % 2 == 1}}}
} -returnCodes ok -result {}

test list-ops-3.2 "filter non-empty list" -body {
    listOps::filter {1 2 3 5} {x {expr {$x % 2 == 1}}}
} -returnCodes ok -result {1 3 5}

# length
skip list-ops-4.*

test list-ops-4.1 "length empty list" -body {
    listOps::length {}
} -returnCodes ok -result 0

test list-ops-4.2 "length non-empty list" -body {
    listOps::length {1 2 3 4}
} -returnCodes ok -result 4

# map
skip list-ops-5.*

test list-ops-5.1 "map empty list" -body {
    listOps::map {} {x {expr {$x + 1}}}
} -returnCodes ok -result {}

test list-ops-5.2 "map non-empty list" -body {
    listOps::map {1 3 5 7} {x {expr {$x + 1}}}
} -returnCodes ok -result {2 4 6 8}

# foldl
skip list-ops-6.*

test list-ops-6.1 "foldl empty list" -body {
    listOps::foldl {} 2 {{acc elem} {expr {$acc * $elem}}}
} -returnCodes ok -result 2

test list-ops-6.2 "foldl direction independent function applied to non-empty list" -body {
    listOps::foldl {1 2 3 4} 5 {{acc elem} {expr {$acc + $elem}}}
} -returnCodes ok -result 15

test list-ops-6.3 "foldl direction dependent function applied to non-empty list" -body {
    listOps::foldl {2 5} 5 {{acc elem} {expr {$acc / $elem}}}
} -returnCodes ok -result 0

# reverse
skip list-ops-7.*

test list-ops-7.1 "reverse empty list" -body {
    listOps::reverse {}
} -returnCodes ok -result {}

test list-ops-7.2 "reverse non-empty list" -body {
    listOps::reverse {1 3 5 7}
} -returnCodes ok -result {7 5 3 1}

test list-ops-7.3 "reverse list of lists is not flattened" -body {
    listOps::reverse {{1 2} {3} {} {4 5 6}}
} -returnCodes ok -result {{4 5 6} {} 3 {1 2}}

# foldr
skip list-ops-8.*

test list-ops-8.1 "foldr empty list" -body {
    listOps::foldr {} 2 {{elem acc} {expr {$elem * $acc}}}
} -returnCodes ok -result 2

test list-ops-8.2 "foldr direction independent function applied to non-empty list" -body {
    listOps::foldr {1 2 3 4} 5 {{elem acc} {expr {$elem + $acc}}}
} -returnCodes ok -result 15

test list-ops-8.3 "foldr direction dependent function applied to non-empty list" -body {
    listOps::foldr {1 2 3 4} 24.0 {{elem acc} {expr {1.0 * $elem / $acc}}}
} -returnCodes ok -result 9.0


cleanupTests
