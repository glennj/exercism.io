#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "markdown.tcl"

test md-1 "parses normal text as a paragraph" -body {
    parse "This will be a paragraph"
} -returnCodes ok -result "<p>This will be a paragraph</p>"

skip md-2
test md-2 "parsing italics" -body {
    parse "_This will be italic_"
} -returnCodes ok -result "<p><em>This will be italic</em></p>"

skip md-3
test md-3 "parsing bold text" -body {
    parse "__This will be bold__"
} -returnCodes ok -result "<p><strong>This will be bold</strong></p>"

skip md-4
test md-4 "mixed normal, italics and bold text" -body {
    parse "This will _be_ __mixed__"
} -returnCodes ok -result "<p>This will <em>be</em> <strong>mixed</strong></p>"

skip md-5
test md-5 "with h1 header level" -body {
    parse "# This will be an h1"
} -returnCodes ok -result "<h1>This will be an h1</h1>"

skip md-6
test md-6 "with h2 header level" -body {
    parse "## This will be an h2"
} -returnCodes ok -result "<h2>This will be an h2</h2>"

skip md-6b
test md-6b "with h3 header level" -body {
    parse "### This will be an h3"
} -returnCodes ok -result "<h3>This will be an h3</h3>"

skip md-6c
test md-6c "with h4 header level" -body {
    parse "#### This will be an h4"
} -returnCodes ok -result "<h4>This will be an h4</h4>"

skip md-6d
test md-6d "with h5 header level" -body {
    parse "##### This will be an h5"
} -returnCodes ok -result "<h5>This will be an h5</h5>"

skip md-7
test md-7 "with h6 header level" -body {
    parse "###### This will be an h6"
} -returnCodes ok -result "<h6>This will be an h6</h6>"

skip md-7b
test md-7b "with h7 header level" -body {
    parse "####### This will not be an h7"
} -returnCodes ok -result "<p>####### This will not be an h7</p>"

skip md-8
test md-8 "unordered lists" -body {
    parse "* Item 1\n* Item 2"
} -returnCodes ok -result "<ul><li>Item 1</li><li>Item 2</li></ul>"

skip md-9
test md-9 "With a little bit of everything" -body {
    parse "# Header!\n* __Bold Item__\n* _Italic Item_"
} -returnCodes ok -result "<h1>Header!</h1><ul><li><strong>Bold Item</strong></li><li><em>Italic Item</em></li></ul>"

skip md-10
test md-10 "with markdown symbols in the header text that should not be interpreted" -body {
    parse "# This is a header with # and * in the text"
} -returnCodes ok -result "<h1>This is a header with # and * in the text</h1>"

skip md-11
test md-11 "with markdown symbols in the list item text that should not be interpreted" -body {
    parse "* Item 1 with a # in the text\n* Item 2 with * in the text"
} -returnCodes ok -result "<ul><li>Item 1 with a # in the text</li><li>Item 2 with * in the text</li></ul>"

skip md-12
test md-12 "with markdown symbols in the paragraph text that should not be interpreted" -body {
    parse "This is a paragraph with # and * in the text"
} -returnCodes ok -result "<p>This is a paragraph with # and * in the text</p>"

skip md-13
test md-13 "unordered lists close properly with preceding and following lines" -body {
    parse "# Start a list\n* Item 1\n* Item 2\nEnd a list"
} -returnCodes ok -result "<h1>Start a list</h1><ul><li>Item 1</li><li>Item 2</li></ul><p>End a list</p>"

skip md-tcl1
test md-tcl1 "multiple em on a line" -body {
    parse "foo _bar_ _baz_ quz"
} -returnCodes ok -result "<p>foo <em>bar</em> <em>baz</em> quz</p>"

skip md-tcl2
test md-tcl2 "multiple strong on a line" -body {
    parse "foo __bar__ __baz__ quz"
} -returnCodes ok -result "<p>foo <strong>bar</strong> <strong>baz</strong> quz</p>"


cleanupTests
