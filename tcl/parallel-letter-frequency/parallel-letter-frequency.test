#!/usr/bin/env tclsh
set version 0.1.0
package require tcltest
namespace import ::tcltest::*
source "parallel-letter-frequency.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc dictionaryMatch {expected actual} {
    if {[dict size $expected] != [dict size $actual]} {
        return false
    }
    dict for {key value} $expected {
        if {![dict exists $actual $key]} {
            return false
        }
        if {[dict get $actual $key] != $value} {
            return false
        }
    }
    return true
}
customMatch dictionary dictionaryMatch


proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set cases {
        plf-1 "one letter" "a" {a 1}
        plf-2 "case insensitive" "aA" {a 2}
        plf-3 "numbers are ignored" {"123" "456" "789"} {}
        plf-4 "punctuation is ignored" {"\[]\\;," "./{}!" ":\"<>?"} {}
        plf-5 "whitespace is ignored" {" \r" "\t\n" "\f\v" "\b "} {}
        plf-6 "repeated string" {"abc" "abc" "abc"} {a 3 b 3 c 3}
        plf-7 "large text" {
            "3 Quotes from Excerism Homepage:"
            "\tOne moment you feel like you're"
            "getting it. The next moment you're"
            "stuck."
            "\tYou know what it’s like to be fluent."
            "Suddenly you’re feeling incompetent"
            "and clumsy."
            "\tHaphazard, convoluted code is"
            "infuriating, not to mention costly. That"
            "slapdash explosion of complexity is an"
            "expensive yak shave waiting to"
            "happen."
        } {
            a 15 b 1 c 8 d 7 e 35 f 6 g 6 h 9 i 19 k 5
            l 12 m 11 n 23 o 26 p 9 q 1 r 7 s 14 t 26
            u 12 v 3 w 3 x 5 y 10 z 1
        }
    }

    foreach {name description input result} $cases {
        test $name $description \
            -body [list calculate $input] \
            -match dictionary \
            -result $result
    }

    cleanupTests
}
