#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "triangle.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

proc booleanMatch {expected actual} {
    return [expr {
        [string is boolean -strict $expected] &&
        [string is boolean -strict $actual] &&
        !!$expected == !!$actual
    }]
}
customMatch boolean booleanMatch

if {$::argv0 eq [info script]} {

    set cases {
        triangle-1  equilateral {2 2 2} true "equilateral: all sides are equal"
        triangle-2  equilateral {2 3 2} false "equilateral: any side is unequal"
        triangle-3  equilateral {5 4 6} false "equilateral: no sides are equal"
        triangle-4  equilateral {0 0 0} false "equilateral: all zero sides is not a triangle"
        triangle-5  equilateral {0.5 0.5 0.5} true "equilateral: sides may be floats"
        triangle-6  isosceles   {3 4 4} true "isosceles: last two sides are equal"
        triangle-7  isosceles   {4 4 3} true "isosceles: first two sides are equal"
        triangle-8  isosceles   {4 3 4} true "isosceles: first and last sides are equal"
        triangle-9  isosceles   {4 4 4} true "isosceles: equilateral triangles are also isosceles"
        triangle-10 isosceles   {2 3 4} false "isosceles: no sides are equal"
        triangle-11 isosceles   {1 1 3} false "isosceles: first triangle inequality violation"
        triangle-12 isosceles   {1 3 1} false "isosceles: second triangle inequality violation"
        triangle-13 isosceles   {3 1 1} false "isosceles: third triangle inequality violation"
        triangle-14 isosceles   {0.5 0.4 0.5} true  "isosceles: sides may be floats"
        triangle-15 scalene     {5 4 6} true "scalene: no sides are equal"
        triangle-16 scalene     {4 4 4} false "scalene: all sides are equal"
        triangle-17 scalene     {4 4 3} false "scalene: two sides are equal"
        triangle-18 scalene     {7 3 2} false "scalene: may not violate triangle inequality"
        triangle-19 scalene     {0.5 0.4 0.6} true "scalene: sides may be floats"
    }

    foreach {name type sides result description} $cases {
        test $name $description -body {
            triangle::is $type $sides
        } -returnCodes ok -match boolean -result $result
    }

    cleanupTests
}
