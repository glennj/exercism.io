#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "accumulate.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    test accumulate-1 "empty list" -body {
        accumulate n {} { expr {$n * $n} }
    } -returnCodes ok -result {}

    test accumulate-2 "squares" -body {
        accumulate n {1 2 3 4} {expr {$n * $n}}
    } -returnCodes ok -result {1 4 9 16}

    test accumulate-3 "upper case" -body {
        accumulate word {hello world} {string toupper $word}
    } -returnCodes ok -result {HELLO WORLD}

    proc divmod {num div} {
        return [list [expr {$num / $div}] [expr {$num % $div}]]
    }

    set numbers {10 17 23}

    test accumulate-4 "divmod" -body {
        accumulate n $numbers {divmod $n 7}
    } -returnCodes ok -result {{1 3} {2 3} {3 2}}

    test accumulate-5 "composition" -body {
        accumulate pair [accumulate n $numbers {divmod $n 7}] {
            lassign $pair quotient remainder
            expr {7 * $quotient + $remainder}
        }
    } -returnCodes ok -result $numbers

    test accumulate-6 "recursive" -body {
        accumulate char {a b c} {
            accumulate digit {1 2 3} {
                string cat $char $digit
            }
        }
    } -returnCodes ok -result {{a1 a2 a3} {b1 b2 b3} {c1 c2 c3}}

    test accumulate-8 "prefix of list" -body {
        accumulate n {7 6 5 4 3 2 1} {
            if {$n == 3} {
                break
            } else {
                set n
            }
        }
    } -returnCodes ok -result {7 6 5 4}

    test accumulate-7 "filter" -body {
        accumulate n {1 2 3 4 5 6 7} {expr {$n % 2 == 0 ? $n : [continue]}}
    } -returnCodes ok -result {2 4 6}

    test accumulate-9 "does not modify original list" -body {
        set original {1 2 3}
        set accumulated [accumulate n $original {incr n}]
        list $accumulated $original
    } -returnCodes ok -result {{2 3 4} {1 2 3}}

    cleanupTests
}
