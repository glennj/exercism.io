#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "word-count.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

# compare two dictionaries for the same keys and same values
proc dictionaryMatch {expected actual} {
    if {[dict size $expected] != [dict size $actual]} {
        return false
    }
    dict for {word count} $expected {
        if {![dict exists $actual $word]} {
            return false
        }
        if {[dict get $actual $word] != $count} {
            return false
        }
    }
    return true
}
customMatch dictionary dictionaryMatch


if {$::argv0 eq [info script]} {

    set cases {
        word-count-1    "count one word"
        "word" 
        {"word" 1}

        word-count-2    "count one of each word"
        "one of each" 
        {"one" 1 "of" 1 "each" 1}

        word-count-3    "multiple occurrences of a word"
        "one fish two fish red fish blue fish" 
        {"one" 1 "fish" 4 "two" 1 "red" 1 "blue" 1}

        word-count-4    "handles cramped lists"
        "one,two,three" 
        {"one" 1 "two" 1 "three" 1}

        word-count-5    "handles expanded lists"
        "one,\ntwo,\nthree" 
        {"one" 1 "two" 1 "three" 1}

        word-count-6    "ignore punctuation"
        "car: carpet as java: javascript!!&@$%^&" 
        {"car" 1 "carpet" 1 "as" 1 "java" 1 "javascript" 1}

        word-count-7    "include numbers"
        "testing, 1, 2 testing" 
        {"testing" 2 "1" 1 "2" 1}

        word-count-8    "normalize case"
        "go Go GO Stop stop" 
        {"go" 3 "stop" 2}

        word-count-9    "with apostrophes"
        "First: don't laugh. Then: don't cry." 
        {"first" 1 "don't" 2 "laugh" 1 "then" 1 "cry" 1}

        word-count-10   "with quotations"
        "Joe can't tell between 'large' and large." 
        {"joe" 1 "can't" 1 "tell" 1 "between" 1 "large" 2 "and" 1}

        word-count-11   "substrings from the beginning"
        "Joe can't tell between app, apple and a." 
        {"joe" 1 "can't" 1 "tell" 1 "between" 1 "app" 1 "apple" 1 "and" 1 "a" 1}

        word-count-12   "multiple spaces not detected as a word"
        " multiple   whitespaces" 
        {"multiple" 1 "whitespaces" 1}

        word-count-13   "alternating word separators not detected as a word"
        ",\n,one,\n ,two \n 'three'" 
        {"one" 1 "two" 1 "three" 1}
    }

    foreach {name description sentence result} $cases {
        test $name $description -body {
            countWords $sentence
        } -returnCodes ok -match dictionary -result $result
    }

    cleanupTests
}
