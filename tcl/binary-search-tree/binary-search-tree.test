#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "binary-search-tree.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

proc dictionaryMatch {expected actual} {
    if {[dict size $expected] != [dict size $actual]} {
        return false
    }
    dict for {key value} $expected {
        if {![dict exists $actual $key]} {
            return false
        }
        set actualValue [dict get $actual $key]

        # if this value is a dict then recurse, 
        # else just check for string equality
        if {[string is list -strict $value] &&
            [llength $value] > 1 && 
            [llength $value] % 2 == 0
        } {
            set procname [lindex [info level 0] 0]
            if {![$procname $value $actualValue]} {
                return false
            }
        } elseif {$actualValue ne $value} {
            return false
        }
    }
    return true
}
customMatch dictionary dictionaryMatch


if {$::argv0 eq [info script]} {

    test bst-1 "data is retained" -body {
        set b [BinarySearchTree new]
        $b insert 4
        $b toDict
    } -returnCodes ok -match dictionary -result {
        data 4 
        left {} 
        right {}
    }

    test bst-2 "insert smaller number" -body {
        set b [BinarySearchTree new]
        $b insert 4
        $b insert 2
        $b toDict
    } -returnCodes ok -match dictionary -result {
        data 4
        left {
            data 2
            left {}
            right {}
        }
        right {}
    }

    test bst-3 "insert same number" -body {
        set b [BinarySearchTree new]
        $b insert 4
        $b insert 4
        $b toDict
    } -returnCodes ok -match dictionary -result {
        data 4
        left {
            data 4
            left {}
            right {}
        }
        right {}
    }

    test bst-4 "insert larger number" -body {
        set b [BinarySearchTree new]
        $b insert 4
        $b insert 5
        $b toDict
    } -returnCodes ok -match dictionary -result {
        data 4
        left {}
        right {
            data 5
            left {}
            right {}
        }
    }

    test bst-5 "create complex tree" -body {
        set b [BinarySearchTree new]
        foreach n {4 2 6 1 3 5 7} {
            $b insert $n
        }
        $b toDict
    } -returnCodes ok -match dictionary -result {
        data 4
        left {
            data 2
            left {data 1 left {} right {}}
            right {data 3 left {} right {}}
        }
        right {
            data 6
            left {data 5 left {} right {}}
            right {data 7 left {} right {}}
        }
    }

    test bst-6 "can sort single number" -body {
        set b [BinarySearchTree new]
        $b insert 2
        $b sorted
    } -returnCodes ok -result {2}

    test bst-7 "can sort if second number is smaller than first" -body {
        set b [BinarySearchTree new]
        $b insert 2
        $b insert 1
        $b sorted
    } -returnCodes ok -result {1 2}

    test bst-8 "can sort if second number is same as first" -body {
        set b [BinarySearchTree new]
        $b insert 2
        $b insert 2
        $b sorted
    } -returnCodes ok -result {2 2}

    test bst-9 "can sort if second number is greater than first" -body {
        set b [BinarySearchTree new]
        $b insert 2
        $b insert 3
        $b sorted
    } -returnCodes ok -result {2 3}

    test bst-10 "can sort complex tree" -body {
        set b [BinarySearchTree new]
        foreach n {4 2 6 1 3 5 7} {
            $b insert $n
        }
        $b sorted
    } -returnCodes ok -result {1 2 3 4 5 6 7}

    test bst-extra-challenge "can iterate over sorted data" -body {
        set b [BinarySearchTree new]
        foreach n {4 2 6 1 3 5 7} {
            $b insert $n
        }
        $b map node {expr {[$node data] + 10}}
    } -returnCodes ok -result {11 12 13 14 15 16 17}

    cleanupTests
}
