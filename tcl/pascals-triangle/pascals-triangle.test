#!/usr/bin/env tclsh
set version 1.5.0
package require tcltest
namespace import ::tcltest::*
source "pascals-triangle.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

proc listMatch {expected actual} {
    if {[llength $expected] != [llength $actual]} {
        return false
    }
    foreach e $expected a $actual {
        if {$e != $a} {
            return false
        }
    }
    return true
}
customMatch list listMatch

if {$::argv0 eq [info script]} {

    set cases {
        pascal-1 "zero rows" 0
          {}
        pascal-2 "single row" 1
          {{1}}
        pascal-3 "two rows" 2
          {{1} {1 1}}
        pascal-4 "three rows" 3
          {{1} {1 1} {1 2 1}}
        pascal-5 "four rows" 4
          {{1} {1 1} {1 2 1} {1 3 3 1}}
        pascal-6 "five rows" 5
          {{1} {1 1} {1 2 1} {1 3 3 1} {1 4 6 4 1}}
        pascal-7 "six rows" 6
          {{1} {1 1} {1 2 1} {1 3 3 1} {1 4 6 4 1} {1 5 10 10 5 1}}
        pascal-8 "ten rows" 10
          {{1} {1 1} {1 2 1} {1 3 3 1} {1 4 6 4 1} {1 5 10 10 5 1} {1 6 15 20 15 6 1} {1 7 21 35 35 21 7 1} {1 8 28 56 70 56 28 8 1} {1 9 36 84 126 126 84 36 9 1}}
    }

    foreach {name description num result} $cases {
        test $name $description -body {
            triangle $num
        } -returnCodes ok -match list -result $result
    }

    cleanupTests
}
