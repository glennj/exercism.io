#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "pov.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

# Compare two dictionaries for the same keys and same values
proc dictionaryMatch {expected actual} {
    if {[dict size $expected] != [dict size $actual]} {
        return false
    }
    dict for {key value} $expected {
        if {![dict exists $actual $key]} {
            return false
        }
        set actualValue [dict get $actual $key]
        if {[llength $actualValue] > 1 && [llength $actualValue] % 2 == 0} {
            # looks like a dict, recurse
            if {![dictionaryMatch $value $actualValue]} {
                return false
            }
        } elseif {$actualValue ne $value} {
            return false
        }
    }
    return true
}
customMatch dictionary dictionaryMatch

proc orderedListsMatch {expected actual} {
    if {[llength $expected] != [llength $actual]} {
        return false
    }
    foreach e $expected a $actual {
        if {$e != $a} {
            return false
        }
    }
    return true
}
customMatch list orderedListsMatch


proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    # "trees" are shown as dict literals here
    # each node in a tree has:
    #    "label" - a string
    #    "children" - (optional) a list of child nodes)

    set cases {
        reroot-1.1 "Results in the same tree if the input tree is a singleton"
            {label x}
            x
            {label x}

        reroot-1.2 "Can reroot a tree with a parent and one sibling"
            {label parent children {{label x} {label sibling}}}
            x
            {label x children {{label parent children {{label sibling}}}}}

        reroot-1.3 "Can reroot a tree with a parent and many siblings"
            {label parent children {{label a} {label x} {label b} {label c}}}
            x
            {label x children {{label parent children {{label a} {label b} {label c}}}}}

        reroot-1.4 "Can reroot a tree with new root deeply nested in tree"
            {label level-0 children {{label level-1 children {{label level-2 children {{label level-3 children {{label x}}}}}}}}}
            x
            {label x children {{label level-3 children {{label level-2 children {{label level-1 children {{label level-0}}}}}}}}}

        reroot-1.5 "Moves children of the new root to same level as former parent"
            {label parent children {{label x children {{label kid-0} {label kid-1}}}}}
            x
            {label x children {{label kid-0} {label kid-1} {label parent}}}

        reroot-1.6 "Can reroot a complex tree with cousins"
            {label grandparent children {{label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}} {label uncle children {{label cousin-0} {label cousin-1}}}}}
            x
            {label x children {{label kid-0} {label kid-1} {label parent children {{label sibling-0} {label sibling-1} {label grandparent children {{label uncle children {{label cousin-0} {label cousin-1}}}}}}}}}
    }

    foreach {name description input label result} $cases {
        test $name $description \
            -body [list fromPov $input $label] \
            -returnCodes ok \
            -match dictionary \
            -result $result
    }

    set cases {
        reroot-2.1 "Errors if target does not exist in a singleton tree"
            {label x}
            "nonexistent"
            "no such target"

        reroot-2.2 "Errors if target does not exist in a large tree"
            {label parent children {{label x children { {label kid-0} {label kid-1} }} {label sibling-0} {label sibling-1}}}
            "nonexistent"
            "no such target"
    }

    foreach {name description input label result} $cases {
        test $name $description \
            -body [list fromPov $input $label] \
            -returnCodes error \
            -result $result
    }

    set cases {
        path-1.1 "Can find path to parent"
            {label parent children {{label x} {label sibling}}}
            "x" "parent"
            {x parent}

        path-1.2 "Can find path to sibling"
            {label parent children {{label a} {label x} {label b} {label c}}}
            x b
            {x parent b}

        path-1.3 "Can find path to cousin"
            {label grandparent children {{label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}} {label uncle children {{label cousin-0} {label cousin-1}}}}}
            x cousin-1
            {x parent grandparent uncle cousin-1}

        path-1.4 "Can find path not involving root"
            {label grandparent children {{label parent children {{label x} {label sibling-0} {label sibling-1}}}}}
            x sibling-1
            {x parent sibling-1}

        path-1.5 "Can find path from nodes other than x"
            {label parent children {{label a} {label x} {label b} {label c}}}
            a c
            {a parent c}

    }

    foreach {name description input from to result} $cases {
        test $name $description \
            -body [list path $input $from $to] \
            -returnCodes ok \
            -match list \
            -result $result
    }

    set cases {
        path-2.1 "Errors if destination does not exist"
            {label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}}
            x nonexistent
            "no such label"

        path-2.2 "Errors if source does not exist"
            {label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}}
            nonexistent x
            "no such label"
    }

    foreach {name description input from to result} $cases {
        test $name $description \
            -body [list path $input $from $to] \
            -returnCodes error \
            -result $result
    }

    cleanupTests
}
