#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "pov.tcl"

# "trees" are shown as dict literals here
# each node in a tree has:
#    "label" - a string
#    "children" - (optional) a list of child nodes)

test reroot-1.1 "Results in the same tree if the input tree is a singleton" -body {
    set input   {label x}
    fromPov $input x
} -returnCodes ok -match dictionary -result {label x}

skip reroot-1.2
test reroot-1.2 "Can reroot a tree with a parent and one sibling" -body {
    set input   {label parent children {{label x} {label sibling}}}
    fromPov $input x
} -returnCodes ok -match dictionary -result {label x children {{label parent children {{label sibling}}}}}

skip reroot-1.3
test reroot-1.3 "Can reroot a tree with a parent and many siblings" -body {
    set input   {label parent children {{label a} {label x} {label b} {label c}}}
    fromPov $input x
} -returnCodes ok -match dictionary -result {label x children {{label parent children {{label a} {label b} {label c}}}}}

skip reroot-1.4
test reroot-1.4 "Can reroot a tree with new root deeply nested in tree" -body {
    set input   {label level-0 children {{label level-1 children {{label level-2 children {{label level-3 children {{label x}}}}}}}}}
    fromPov $input x
} -returnCodes ok -match dictionary -result {label x children {{label level-3 children {{label level-2 children {{label level-1 children {{label level-0}}}}}}}}}

skip reroot-1.5
test reroot-1.5 "Moves children of the new root to same level as former parent" -body {
    set input   {label parent children {{label x children {{label kid-0} {label kid-1}}}}}
    fromPov $input x
} -returnCodes ok -match dictionary -result {label x children {{label kid-0} {label kid-1} {label parent}}}

skip reroot-1.6
test reroot-1.6 "Can reroot a complex tree with cousins" -body {
    set input   {label grandparent children {{label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}} {label uncle children {{label cousin-0} {label cousin-1}}}}}
    fromPov $input x
} -returnCodes ok -match dictionary -result {label x children {{label kid-0} {label kid-1} {label parent children {{label sibling-0} {label sibling-1} {label grandparent children {{label uncle children {{label cousin-0} {label cousin-1}}}}}}}}}


skip reroot-2.1
test reroot-2.1 "Errors if target does not exist in a singleton tree" -body {
    set input {label x}
    fromPov $input "nonexistent"
} -returnCodes error -result "no such target"

skip reroot-2.2
test reroot-2.2 "Errors if target does not exist in a large tree" -body {
    set input {label parent children {{label x children { {label kid-0} {label kid-1} }} {label sibling-0} {label sibling-1}}}
    fromPov $input "nonexistent"
} -returnCodes error -result "no such target"


skip path-1.1
test path-1.1 "Can find path to parent" -body {
    set input {label parent children {{label x} {label sibling}}}
    path $input "x" "parent"
} -returnCodes ok -match orderedLists -result {x parent}

skip path-1.2
test path-1.2 "Can find path to sibling" -body {
    set input {label parent children {{label a} {label x} {label b} {label c}}}
    path $input x b
} -returnCodes ok -match orderedLists -result {x parent b}

skip path-1.3
test path-1.3 "Can find path to cousin" -body {
    set input {label grandparent children {{label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}} {label uncle children {{label cousin-0} {label cousin-1}}}}}
    path $input x cousin-1
} -returnCodes ok -match orderedLists -result {x parent grandparent uncle cousin-1}

skip path-1.4
test path-1.4 "Can find path not involving root" -body {
    set input {label grandparent children {{label parent children {{label x} {label sibling-0} {label sibling-1}}}}}
    path $input x sibling-1
} -returnCodes ok -match orderedLists -result {x parent sibling-1}

skip path-1.5
test path-1.5 "Can find path from nodes other than x" -body {
    set input {label parent children {{label a} {label x} {label b} {label c}}}
    path $input a c
} -returnCodes ok -match orderedLists -result {a parent c}


skip path-2.1
test path-2.1 "Errors if destination does not exist" -body {
    set input {label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}}
    path $input x nonexistent
} -returnCodes error -result "no such label"

skip path-2.2
test path-2.2 "Errors if source does not exist" -body {
    set input {label parent children {{label x children {{label kid-0} {label kid-1}}} {label sibling-0} {label sibling-1}}}
    path $input nonexistent x
} -returnCodes error -result "no such label"


cleanupTests
