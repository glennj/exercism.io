#!/usr/bin/env tclsh
set version 2.0.0
package require tcltest
namespace import ::tcltest::*
source "satellite.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

proc dictionaryMatch {expected actual} {
    if {[dict size $expected] != [dict size $actual]} {
        return false
    }
    dict for {key value} $expected {
        if {![dict exists $actual $key]} {
            return false
        }
        set actualValue [dict get $actual $key]

        # if this value is a dict then recurse, 
        # else just check for string equality
        if {[string is list -strict $value] &&
            [llength $value] > 1 && 
            [llength $value] % 2 == 0
        } {
            set procname [lindex [info level 0] 0]
            if {![$procname $value $actualValue]} {
                return false
            }
        } elseif {$actualValue ne $value} {
            return false
        }
    }
    return true
}
customMatch dictionary dictionaryMatch

if {$::argv0 eq [info script]} {

    set ok_cases {
        satellite-1.1 "Empty tree" {} {} {}
        satellite-1.2 "Tree with one item" {a} {a} {v a l {} r {}}
        satellite-1.3 "Tree with many items" 
            {a i x f r} {i a f x r} 
            {v a
                l {v i l {} r {}}
                r {v x
                    l {v f l {} r {}}
                    r {v r l {} r {}}
                }
            }
    }

    foreach {name description preorder inorder expected} $ok_cases {
        test $name $description \
            -body [list treeFromTraversals $preorder $inorder] \
            -returnCodes ok \
            -match dictionary \
            -result $expected
    }

    set error_cases {
        satellite-2.1 "Reject traversals of different length"
            {a b} {b a r} "traversals must have the same length"
        satellite-2.2 "Reject inconsistemt traversals of same length"
            {x y z} {a b c} "traversals must contain the same elements"
        satellite-2.3 "Reject traversals with repeated elements"
            {a b a} {b a a} "traversals must contain unique elements"
    }

    foreach {name description preorder inorder errmsg} $error_cases {
        test $name $description \
            -body [list treeFromTraversals $preorder $inorder] \
            -returnCodes error \
            -result $errmsg
    }

    cleanupTests
}
