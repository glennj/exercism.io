#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source "rotational-cipher.tcl"

proc fail_fast {} {
    return [expr {
        ![info exists ::env(RUN_ALL)]
        || [string is boolean -strict $::env(RUN_ALL)]
        && !$::env(RUN_ALL)
    }]
}

proc failed {} {
    return [expr {$::tcltest::numTests(Failed) > 0}]
}

if {[fail_fast]} {
    proc test args {
        if {[failed]} {::tcltest::configure -skip *}
        uplevel [list ::tcltest::test {*}$args]
    }
}

proc cleanupTests {} {
    set failed [failed]
    uplevel 1 ::tcltest::cleanupTests
    if {$failed} {exit 1}
}

if {$::argv0 eq [info script]} {

    set cases {
        rot-1 "rotate a by 0, same output as input" "a" 0 "a"
        rot-2 "rotate a by 1" "a" 1 "b"
        rot-3 "rotate a by 26, same output as input" "a" 26 "a"
        rot-4 "rotate m by 13" "m" 13 "z"
        rot-5 "rotate n by 13 with wrap around alphabet" "n" 13 "a"
        rot-6 "rotate capital letters" "OMG" 5 "TRL"
        rot-7 "rotate spaces" "O M G" 5 "T R L"
        rot-8 "rotate numbers" "Testing 1 2 3 testing" 4 "Xiwxmrk 1 2 3 xiwxmrk"
        rot-9 "rotate punctuation" "Let's eat, Grandma!" 21 "Gzo'n zvo, Bmviyhv!"
        rot-10 "rotate all letters" "The quick brown fox jumps over the lazy dog." 13 "Gur dhvpx oebja sbk whzcf bire gur ynml qbt."
    }

    foreach {name description text shift result} $cases {
        test $name $description -body {
            rotate $text $shift
        } -returnCodes ok -result $result
    }

    cleanupTests
}
