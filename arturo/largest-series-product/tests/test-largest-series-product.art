import.version:3.0.0 {unitt}! 
import {src/largest-series-product}!

describe "Largest Series Product" [
    it "finds the largest product if span equals length" [
        expects.be:'equal? @[18 largestProduct "29" 2]
    ]

    it "can find the largest product of 2 with numbers in order" [
        expects.be:'equal? @[72 largestProduct "0123456789" 2]
    ]

    it "can find the largest product of 2" [
        expects.be:'equal? @[48 largestProduct "576802143" 2]
    ]

    it "can find the largest product of 3 with numbers in order" [
        expects.be:'equal? @[504 largestProduct "0123456789" 3]
    ]

    it "can find the largest product of 3" [
        expects.be:'equal? @[270 largestProduct "1027839564" 3]
    ]

    it "can find the largest product of 5 with numbers in order" [
        expects.be:'equal? @[15120 largestProduct "0123456789" 5]
    ]

    it "can get the largest product of a big number" [
        expects.be:'equal? @[
            23520
            largestProduct "73167176531330624919225119674426574742355349194934" 6
        ]
    ]

    it "reports zero if the only digits are zero" [
        expects.be:'equal? @[0 largestProduct "0000" 2]
    ]

    it "reports zero if all spans include zero" [
        expects.be:'equal? @[0 largestProduct "99099" 3]
    ]

    it "rejects span longer than string length" [
        expects.be:'null? @[largestProduct "123" 4]
    ]

    it "reports 1 for empty string and empty product (0 span)" [
        expects.be:'equal? @[1 largestProduct "" 0]
    ]

    it "reports 1 for nonempty string and empty product (0 span)" [
        expects.be:'equal? @[1 largestProduct "123" 0]
    ]

    it "rejects empty string and nonzero span" [
        expects.be:'null? @[largestProduct "" 1]
    ]

    it "rejects invalid character in digits" [
        expects.be:'null? @[largestProduct "1234a5" 2]
    ]

    it "rejects negative span" [
        expects.be:'null? @[largestProduct "12345" neg 1]
    ]
]
