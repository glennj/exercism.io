import.version:3.0.0 {unitt}! 
import {src/robot-simulator}!

describe "Robot Simulator" [
  describe "Robot Simulator - Rotating clockwise" [
    it "rotating clockwise changes north to east" [
        r: to :robot @[0 0 "north"]
        do [r\simulate "R"]
        expects.be:'equal? @[
            [0 0 "east"]
            @[r\x r\y r\direction]
        ]
    ]

    it "rotating clockwise changes east to south" [
        r: to :robot @[0 0 "east"]
        do [r\simulate "R"]
        expects.be:'equal? @[
            [0 0 "south"]
            @[r\x r\y r\direction]
        ]
    ]

    it "rotating clockwise changes south to west" [
        r: to :robot @[0 0 "south"]
        do [r\simulate "R"]
        expects.be:'equal? @[
            [0 0 "west"]
            @[r\x r\y r\direction]
        ]
    ]

    it "rotating clockwise changes west to north" [
        r: to :robot @[0 0 "west"]
        do [r\simulate "R"]
        expects.be:'equal? @[
            [0 0 "north"]
            @[r\x r\y r\direction]
        ]
    ]
  ]

  describe "Robot Simulator - Rotating counterclockwise" [
    it "rotating counterclockwise changes north to west" [
        r: to :robot @[0 0 "north"]
        do [r\simulate "L"]
        expects.be:'equal? @[
            [0 0 "west"]
            @[r\x r\y r\direction]
        ]
    ]

    it "rotating counterclockwise changes west to south" [
        r: to :robot @[0 0 "west"]
        do [r\simulate "L"]
        expects.be:'equal? @[
            [0 0 "south"]
            @[r\x r\y r\direction]
        ]
    ]

    it "rotating counterclockwise changes south to east" [
        r: to :robot @[0 0 "south"]
        do [r\simulate "L"]
        [x y direction]: @[r\x r\y r\direction]
        expects.be:'equal? @[
            [0 0 "east"]
            @[r\x r\y r\direction]
        ]
    ]

    it "rotating counterclockwise changes east to north" [
        r: to :robot @[0 0 "east"]
        do [r\simulate "L"]
        expects.be:'equal? @[
            [0 0 "north"]
            @[r\x r\y r\direction]
        ]
    ]
  ]

  describe "Robot Simulator - Moving forward" [
    it "Moving forward facing north increments Y" [
        r: to :robot @[0 0 "north"]
        do [r\simulate "A"]
        expects.be:'equal? @[
            [0 1 "north"]
            @[r\x r\y r\direction]
        ]
    ]

    it "Moving forward facing south decrements Y" [
        r: to :robot @[0 0 "south"]
        do [r\simulate "A"]
        expects.be:'equal? @[
            @[0 neg 1 "south"]
            @[r\x r\y r\direction]
        ]
    ]

    it "Moving forward facing east increments X" [
        r: to :robot @[0 0 "east"]
        do [r\simulate "A"]
        expects.be:'equal? @[
            [1 0 "east"]
            @[r\x r\y r\direction]
        ]
    ]

    it "Moving forward facing west decrements X" [
        r: to :robot @[0 0 "west"]
        do [r\simulate "A"]
        expects.be:'equal? @[
            @[neg 1 0 "west"]
            @[r\x r\y r\direction]
        ]
    ]
  ]

  describe "Robot Simulator - Follow series of instructions" [
    it "moving east and north from README" [
        r: to :robot @[7 3 "north"]
        do [r\simulate "RAALAL"]
        expects.be:'equal? @[
            @[9 4 "west"]
            @[r\x r\y r\direction]
        ]
    ]

    it "moving west and north" [
        r: to :robot @[0 0 "north"]
        do [r\simulate "LAAARALA"]
        expects.be:'equal? @[
            @[neg 4 1 "west"]
            @[r\x r\y r\direction]
        ]
    ]

    it "moving west and south" [
        r: to :robot [2 neg 7 "east"]
        do [r\simulate "RRAAAAALA"]
        expects.be:'equal? @[
            @[neg 3 neg 8 "south"]
            @[r\x r\y r\direction]
        ]
    ]

    it "moving east and north" [
        r: to :robot [8 4 "south"]
        do [r\simulate "LAAARRRALLLL"]
        expects.be:'equal? @[
            @[11 5 "north"]
            @[r\x r\y r\direction]
        ]
    ]
  ]
]

