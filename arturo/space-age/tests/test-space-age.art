import.version:3.0.0 {unitt}! 
import {src/space-age}!

approximatelyEqual?: function [expected result][ 
    expectedScalar: to :floating expected 
    resultScalar: to :floating convert result units expected
    difference: abs sub expectedScalar resultScalar
    between? difference 0 0.01 
] 

describe "Space Age" [
    it "age on Earth" [
        expects.be:'approximatelyEqual? @[
            31.69`earthYear
            ageOn 'earth 1000000000`second
        ]
    ]
    
    it "age on Mercury" [
        expects.be:'approximatelyEqual? @[
            280.88`mercuryYear
            ageOn 'mercury 2134835688`second
        ]
    ]
    
    it "age on Venus" [
        expects.be:'approximatelyEqual? @[
            9.78`venusYear
            ageOn 'venus 189839836`second
        ]
    ]
    
    it "age on Mars" [
        expects.be:'approximatelyEqual? @[
            35.88`marsYear
            ageOn 'mars 2129871239`second
        ]
    ]
    
    it "age on Jupiter" [
        expects.be:'approximatelyEqual? @[
            2.41`jupiterYear
            ageOn 'jupiter 901876382`second
        ]
    ]
    
    it "age on Saturn" [
        expects.be:'approximatelyEqual? @[
            2.15`saturnYear
            ageOn 'saturn 2000000000`second
        ]
    ]
    
    it "age on Uranus" [
        expects.be:'approximatelyEqual? @[
            0.46`uranusYear
            ageOn 'uranus 1210123456`second
        ]
    ]
    
    it "age on Neptune" [
        expects.be:'approximatelyEqual? @[
            0.35`neptuneYear
            ageOn 'neptune 1821023456`second
        ]
    ]
    
    it "invalid planet returns null" [
        expects.be:'null? @[ageOn 'sun 680804807`second]
    ]
]
