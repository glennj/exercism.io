import.version:2.0.1 {unitt}!
import {src/binary-search}!

suite "Binary Search" [
    test "finds a value in a block with one element" [
        vals: [6]
        result: find vals 6
        assert -> 0 = result
    ]

    test "finds a value in the middle of a block" [
        vals: [1 3 4 6 8 9 11]
        result: find vals 6
        assert -> 3 = result
    ]

    test "finds a value at the beginning of a block" [
        vals: [1 3 4 6 8 9 11]
        result: find vals 1
        assert -> 0 = result
    ]

    test "finds a value at the end of a block" [
        vals: [1 3 4 6 8 9 11]
        result: find vals 11
        assert -> 6 = result
    ]

    test "finds a value in a block of odd length" [
        vals: [1 3 5 8 13 21 34 55 89 144 233 377 634]
        result: find vals 144
        assert -> 9 = result
    ]

    test "finds a value in a block of even length" [
        vals: [1 3 5 8 13 21 34 55 89 144 233 377]
        result: find vals 21
        assert -> 5 = result
    ]

    test "identifies that a value is not included in the block" [
        vals: [1 3 4 6 8 9 11]
        result: find vals 7
        assert -> null = result
    ]

    test "a value smaller than the block's smallest value is not found" [
        vals: [1 3 4 6 8 9 11]
        result: find vals 0
        assert -> null = result
    ]

    test "a value larger than the block's largest value is not found" [
        vals: [1 3 4 6 8 9 11]
        result: find vals 13
        assert -> null = result
    ]

    test "nothing is found in an empty block" [
        vals: []
        result: find vals 1
        assert -> null = result
    ]

    test "nothing is found when the left and right bounds cross" [
        vals: [1 2]
        result: find vals 0
        assert -> null = result
    ]
]

